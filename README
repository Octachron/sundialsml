Ocaml interface to the Sundials 2.4.0 Serial CVode solver

Author: T.Bourke INRIA 2010
        while visiting with Marc Pouzet at ENS, August 2010

Overview and limitations
------------------------

This library provides an Ocaml interface to part of the Sundials library
from the Lawrence Livermore National Laboratory.

Only the CVODE solver, for initial value problems of Ordinary Differential
Equations (ODE), is supported and then only with serial NVectors. That is,
the CVODES, IDA, IDAS, and KINSOL solvers are not supported, nor is the
parallel interface to CVODE.

The interface uses the Ocaml Bigarray module to avoid copying solver data
between Ocaml and C.

Compilation
-----------

The library assumes 64-bit floats. This means that Sundials must be compiled
so that realtype = double (i.e. ./configure -with-precision=double, which is
anyway the default).

Approach
--------

The API aims to provide a comfortable and natural environment for using the
solver in Ocaml programs, rather than an exact duplicate of the standard
interface.

This means that:

* Function names have been renamed according to a regular scheme:
 	CVodeSetMaxOrd -> Cvode_serial.set_max_ord
	CVSpilsSetJacTimesVecFn	-> Cvode_serial.Spils.set_jac_times_vec_fn

   The leading 'module identifier' is removed and replaced with a module
   path. The identifier is renamed by separating words that begin with a
   capital letter in CVODEs by underscores. Only lower case letters are
   used.

* Constants have been replaced by variant types in most cases. They have
  also been renamed:
	PREC_NONE -> Cvode_serial.PrecNone
  Change to CamelCase and remove underscores.

* Some routines encapsulate several lower-level calls.
  The most prominent example is init, which calls several functions,
  including setting default tolerances and, possibly, setting up a linear
  solver.

* Routines throw exceptions rather than returning error codes.

* Callbacks (into Ocaml) specify an error by throwing an exception rather
  than by returning an error code.

Organization
------------
build.sh		script to build the library cvode_serial.cma

cvode_serial.mli	Ocaml interface to sundials
cvode_serial.ml		Ocaml library; declares types, calls into C

cvode_serial.h		internal header file for C implementation
cvode_serial.c		trickier parts of the interface to C
cvode_serial_bp.c	boiler plate for the interface to C

Use
---
ocamlc -o program -I /usr/local/lib -I .. \
    unix.cma bigarray.cma cvode_serial.cma \
    program.ml

CVODE function		    Cvode_serial equivalent
--------------		    -----------------------
CVodeCreate		    called inside init
CVodeSetErrHandlerFn	    set_err_handler_fn
CVodeSetErrFile		    set_err_file
CVodeSetUserData	    Used internally by the library and thus not
			    available. Not needed in Ocaml anyway, just
			    use references or partial evaluation in the
			    callback routines.
CVodeSetMaxOrd		    set_max_ord
CVodeSetMaxNumSteps	    set_max_num_steps
CVodeSetMaxHnilWarns	    set_max_hnil_warns
CVodeSetStabLimDet	    set_stab_lim_det
CVodeSetInitStep	    set_init_step
CVodeSetMinStep		    set_min_step
CVodeSetMaxStep		    set_max_step
CVodeSetStopTime	    set_stop_time
CVodeSetMaxErrTestFails	    set_max_err_test_fails
CVodeSetMaxNonlinIters	    set_max_nonlin_iters
CVodeSetMaxConvFails	    set_max_conv_fails
CVodeSetNonlinConvCoef	    set_nonlin_conv_coef
CVodeSetIterType	    set_iter_type
CVodeSetRootDirection	    set_root_direction, set_all_root_directions
CVodeSetNoInactiveRootWarn  set_no_inactive_root_warn
CVodeInit		    called inside init
CVodeReInit		    re_init
CVodeSStolerances	    ss_tolerances
CVodeSVtolerances	    sv_tolerances
CVodeWFtolerances	    wf_tolerances
CVodeRootInit		    called inside init
CVode			    normal (CV_NORMAL), one_step (CV_ONE_STEP)
CVodeGetDky		    get_dky
CVodeGetWorkSpace	    get_work_space
CVodeGetNumSteps	    get_num_steps
CVodeGetNumRhsEvals	    get_num_rhs_evals
CVodeGetNumLinSolvSetups    get_num_lin_solv_setups
CVodeGetNumErrTestFails	    get_num_err_test_fails
CVodeGetLastOrder	    get_last_order
CVodeGetCurrentOrder	    get_current_order
CVodeGetNumStabLimOrderReds num_stab_lim_order_reds
CVodeGetActualInitStep	    get_actual_init_step
CVodeGetLastStep	    get_last_step
CVodeGetCurrentStep	    get_current_step
CVodeGetCurrentTime	    get_current_time
CVodeGetTolScaleFactor	    get_tol_scale_factor
CVodeGetErrWeights	    err_weight
CVodeGetEstLocalErrors	    get_est_local_errors
CVodeGetNumGEvals	    get_num_g_evals
CVodeGetRootInfo	    get_root_info
CVodeGetIntegratorStats	    get_integrator_stats
CVodeGetNumNonlinSolvIters  get_num_nonlin_solv_iters
CVodeGetNumNonlinSolvConvFails	get_num_nonlin_solv_conv_fails
CVodeGetNonlinSolvStats	    (get_num_nonlin_solv_iters s,
			     get_num_nonlin_solv_conv_fails s)
CVodeGetReturnFlagName	    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.
CVodeFree		    free (called automatically during garbage
			    collection if not called manually)

CVDense			    called inside init and set_iter_type when necessary

CVLapackDense		    called inside init and set_iter_type when necessary

CVBand			    called inside init and set_iter_type when necessary
CVBandPrecInit		    called inside init and set_iter_type when necessary
CVBandPrecGetWorkSpace	    BandPrec.get_work_space
CVBandPrecGetNumRhsEvals    BandPrec.get_num_rhs_evals

CVDiag			    called inside init and set_iter_type when necessary
CVDiagGetWorkSpace	    Diag.get_work_space
CVDiagGetNumRhsEvals	    Diag.get_num_rhs_evals
CVDiagGetLastFlag	    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.
CVDiagGetReturnFlagName	    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.

CVSpgmr			    called inside init and set_iter_type when necessary

CVSpbcg			    called inside init and set_iter_type when necessary

CVSptfqmr		    called inside init and set_iter_type when necessary

CVBBDPrecInit		    Not implemented (requires parallel N_Vectors)
CVBBDPrecReInit		    Not implemented (requires parallel N_Vectors)
CVBBDPrecGetWorkSpace	    Not implemented (requires parallel N_Vectors)
CVBBDPrecGetNumGfnEvals	    Not implemented (requires parallel N_Vectors)

CVDlsSetDenseJacFn	    Dls.set_dense_jac_fn
CVDlsSetBandJacFn	    Dls.set_band_jac_fn
CVDlsGetWorkSpace	    Dls.get_work_space
CVDlsGetNumJacEvals	    Dls.get_num_jac_evals
CVDlsGetNumRhsEvals	    Dls.get_num_rhs_evals
CVDlsGetLastFlag	    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.
CVDlsGetReturnFlagName	    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.

CVSpilsSetPrecType	    Spils.set_prec_type
CVSpilsSetGSType	    Spils.set_gs_type
CVSpilsSetMaxl		    Spils.set_maxl
CVSpilsSetEpsLin	    Spils.set_eps_lin
CVSpilsSetPreconditioner    Spils.set_preconditioner
CVSpilsSetJacTimesVecFn	    Spils.set_jac_times_vec_fn
CVSpilsGetWorkSpace	    Spils.get_work_space
CVSpilsGetNumPrecEvals	    Spils.get_num_prec_evals
CVSpilsGetNumPrecSolves	    Spils.get_num_prec_solves
CVSpilsGetNumLinIters	    Spils.get_num_lin_iters
CVSpilsGetNumConvFails	    Spils.get_num_conv_fails
CVSpilsGetNumJtimesEvals    Spils.get_num_jtimes_evals
CVSpilsGetNumRhsEvals	    Spils.get_num_rhs_evals
CVSpilsGetLastFlag	    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.
CVSpilsGetReturnFlagName    Not necessary. No flags are returned, rather
			    exceptions are thrown when necessary.

DENSE_ELEM		    Densematrix.get, Densematrix.set
DENSE_COL		    Not implemented.
			    TODO: implement this!

BAND_ELEM		    Bandmatrix.get, Bandmatrix.set
BAND_COL		    Bandmatrix.Col.get_col
BAND_COL_ELEM		    Bandmatrix.Col.get, Bandmatrix.Col.set

Notes on Callback functions
---------------------------
* Callback functions are passed the data portion of NVectors directly.
  For serial NVectors, for example, NV_DATA_S is called on each NVector
  before passing them to the callback (as bigarrays).

TODO:
    List Densematrix, Densematrix.Direct,
	 Bandmatrix, Bandmatrix.Direct functions

TODO:
    Explain mapping of arguments (original <-> ml version) in callback functions

TODO:
  explain where to find and use functions like
    N_VMaxNorm		    Carray.vmax_norm
    others			    Not implemented

