
Decrees
-------
* Makefiles will be used for the build system; though we will try to
  simplify and improve them.

TODO
----

DONE 1. (Tim) Change the copyright headers:
   - OCaml interface to (serial) Sundials.
   - Copyright 2014...

DONE 2. (Tim) Tidy up and complete the linear solver interface:
   - Spils
   - Smoother integration with CVODE and IDA.
   - Add tests / examples (from Sundials?)

DONE 3. (Tim) Interface to KINSOL.
   - Write the interface.
   - Adapt examples from Sundials.

DONE 4. (Tim) Doc generation to work for both OCaml 3.12 and 4.x.

DONE 5. (Tim) Interface to CVODES with maximal reuse and minimal copy-paste

DONE 6. (Tim) Rework the nvector interface and eliminate code duplication.

DONE 7. (Tim) Interface the Alternate Linear Solver Modules
   http://computation.llnl.gov/casc/sundials/documentation/cv_guide/node8.html

DONE 8. (Tim) Interface with Parallel NVectors

9. (Jun) Interface to IDAS with maximal reuse and minimal copy-paste
    - adapt for parallel nvector changes
    - add alternate linear solver modules
    - add BDD solver.
    - ensure consistency with recent changes cvode/cvodes.

10. (Jun) Ensure that all examples are implemented.
    Add the missing parallel examples for cvode, cvodes, kinsol, ida, idas. 

10. (Jun) Add a perf.log target (like tests.log) to each examples
    subdirectory. Run each binary (both C and opt and byte) 10 times and
    take the average wall clock time. Generate a table with three columns
    (original, .opt, .byte) and one number in each.

11. (Jun) OPAM/findlib wrappers.
   - Everything properly supported in a toplevel

12. (Jun) Examine performance of examples, especially:
	sundials/cvodes/cvsFoodWeb_ASAi_kry
	sundials/cvodes/cvsFoodWeb_ASAp_kry

    Possibly with a Makefile target to generate data comparing the examples
    executed in C and in OCaml (i.e., two wall-clock times for each example,
    normalized so that the bar for C is equal to 1; each example executed
    several times and an average computed).

    Compare to the same examples in pySUNDIALS or python-sundials?

DONE 13. (Tim) Parallel CVODES and KINSOL examples.

14. (Tim) Fix, simplify, and generally tidy up all doc comments. Write the
    missing documentation and rewrite intro.doc.

15. (Tim) Eventual release:
   - DÃªpot APP.
   - Repository on Github.
   - Release on Opam.
   - Announce on OCaml and Sundials lists.

MINOR PATCHES
-------------
1. Rename all functions *_err_* to *_error_*.

2. Eliminate the Dls functions:
     set_dense_jac_fn
     clear_dense_jac_fn
     set_band_jac_fn
     clear_band_jac_fn
   and the Spils functions:
     set_preconditioner
     set_jac_times_vec_fn
     clear_jac_times_vec_fn

   and just provide a reinit function.

3. CVODE/IDA: set_preconditioner should allow the setup function to be
   optional.
   - done for CVODE.

4. Tidy up the documentation; in particular, add @raise tags for functions
   that raise exceptions (like get_dky... )

DONE 5. Rename Carray to Realarray?
DONE 6. Rename create functions to make?

7. Using spgmr linear solver with prec_setup = None and prec_solve = Some
   crashes.

TO DISCUSS
----------
* The above patches.

* Should we remove all examples except the Sundials ones?

* Don't use sundials-config?
  - it leads to duplicate options.
  - it's not possible to request both "-t s" and "-t p" at the same time
  - it's not really suited to building a library with everything
  Or propose changes on the sundials-users list?

