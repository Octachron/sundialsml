
Decisions
---------
* Makefiles will be used for the build system; though we will try to
  simplify and improve them.

* Name and version numbering: Sundials/ML 2.6.0
  first version: Sundials/ML 2.6.0ml1
  first patch:   Sundials/ML 2.6.0ml2
  second patch:  Sundials/ML 2.6.0ml3 etc.
  or
  first version: Sundials/ML 2.6.0
  first patch:   Sundials/ML 2.6.0p1
  second patch:  Sundials/ML 2.6.0p2

  Have everything working for 2.5.0 (and include a patch file for the
  Sundials source), but make the first official release for 2.6.0.

Priorities
----------
1. Callbacks with exception checking directly from C.
2. Access around the weak pointer where possible (through stack).

TODO
----

1. Test under OCaml 3.12.x.

4. Performance issues/tests:
   - Try to have all examples within 2xC (with the possible exception of
     cvode/serial/cvRoberts_dns_uw_alt).

   - Bigarray allocation in root function callbacks.
     Try including a bigarray 'shell' (of int32s) in the session structure,
     as per CVODES/IDAS to avoid allocating at each call.

   - Weak pointer dereference. In a separate branch, test the effect of
     using direct values (especially on examples that are already very fast:
     cvode/serial/cvRoberts_dns. Evaluate the effect using kcachegrind.
     Possibly do callback_exns directly from C, thus eliminating the
     intermediate function.

     Q. How to handle error callbacks without adding extra code everywhere?
     Associate two values with each session: a weak pointer (for error
     callbacks), and a value (overwritten at each Sundials entry)?

5. (Jun) OPAM/findlib wrappers.
   - Everything properly supported in a toplevel

6. (Tim) Fix, simplify, and generally tidy up all doc comments. Write the
   missing documentation and rewrite intro.doc.

   Tidy up the documentation; in particular, add @raise tags for functions
   that raise exceptions (like get_dky... )
   Document the ones that correspond to return values mentioned in their
   user guide.  (Or otherwise that are deemed important.)

   To explain:
   - Possibility to 'break' Sundials by passing nvectors of an incompatible
     size (e.g., Cvode.init with an nvector of size 10 and reinit with one
     of size 5).
   - Check the various links (@cvode, @cvodes, @ida, @idas, etc.)
     (automatically with a script?)

7. (Tim) Eventual release:
   - Test against OCaml 3.12.x (document in intro.doc, update configure)
   - DÃªpot APP.
   - Repository on Github.
   - Release on Opam.
   - Announce on OCaml and Sundials lists.

MINOR PATCHES
-------------
2. (Tim/Jun) Add the Dls functions to Cvodes/Idas:
     set_dense_jac_fn
     clear_dense_jac_fn
     set_band_jac_fn
     clear_band_jac_fn
   and the Spils functions:
     set_preconditioner
     set_jac_times_vec_fn
     clear_jac_times_vec_fn

   or just provide a reinit function.

   In the doc, mention that these don't reset performance counters.
   But they're discouraged otherwise.

5. Flatten out jacobian_arg

6. Rename CAML_FN everywhere?

TO DISCUSS
----------
* Should we check consistency of vector lengths?

  - To do this generically, we need a new function in nvector_*.ml to compare
    array lengths.

  - C-implemented comparator as third field of nvector type.  Provide
    NULL for custom nvectors (which will be implemented in OCaml so
    are safe anyway).

