
Decisions
---------
* Makefiles will be used for the build system; though we will try to
  simplify and improve them.

* Name and version numbering: Sundials/ML 2.6.0
  first version: Sundials/ML 2.6.0ml1
  first patch:   Sundials/ML 2.6.0ml2
  second patch:  Sundials/ML 2.6.0ml3
  etc.
  or
  first version: Sundials/ML 2.6.0
  first patch:   Sundials/ML 2.6.0p1
  second patch:  Sundials/ML 2.6.0p2

  Have everything working for 2.5.0 (and include a patch file for the
  Sundials source), but make the first official release for 2.6.0.


TODO
----

1. Test under OCaml 3.12.x.

2. (Jun) Interface to IDAS with maximal reuse and minimal copy-paste
    - adapt for parallel nvector changes
    - add alternate linear solver modules
    - add BDD solver.
    - ensure consistency with recent changes cvode/cvodes.

3. (Jun) Add a perf.log target (like tests.log) to each examples
   subdirectory. Run each binary (both C and opt and byte) 10 times and
   take the average wall clock time. Generate a table with three columns
   (original, .opt, .byte) and one number in each.
   gnuplot with C time normalized.

   - Show CFLAGS and other relevant settings in the title?

4. Performance issues/tests:
   - Try to have all examples within 2xC (with the possible exception of
     cvode/serial/cvRoberts_dns_uw_alt).

   - Bigarray allocation in root function callbacks.
     Try including a bigarray 'shell' (of int32s) in the session structure,
     as per CVODES/IDAS to avoid allocating at each call.

   - Weak pointer dereference. In a separate branch, test the effect of
     using direct values (especially on examples that are already very fast:
     cvode/serial/cvRoberts_dns. Evaluate the effect using kcachegrind.

   - See whether the Dls.DenseMatrix representation can be changed to allow
     an unwrap function (as for ArrayDenseMatrix), with the idea of speeding
     up the routines in Kinsol.Dls (and hence the example
     kinsol/serial/kinRoboKin_dns; compare to kinRoboKin_dns_alt which has
     the overhead of an alternate linear solver, but which makes up for it
     by directly accessing the jacobian as a realarray).

5. (Jun) OPAM/findlib wrappers.
   - Everything properly supported in a toplevel

6. (Tim) Fix, simplify, and generally tidy up all doc comments. Write the
   missing documentation and rewrite intro.doc.

   Tidy up the documentation; in particular, add @raise tags for functions
   that raise exceptions (like get_dky... )
   Document the ones that correspond to return values mentioned in their
   user guide.  (Or otherwise that are deemed important.)

   To explain:
   - Possibility to 'break' Sundials by passing nvectors of an incompatible
     size (e.g., Cvode.init with an nvector of size 10 and reinit with one
     of size 5).
   - Check the various links (@cvode, @cvodes, @ida, @idas, etc.)
     (automatically with a script?)

7. (Tim) Eventual release:
   - Test against OCaml 3.12.x (document in intro.doc, update configure)
   - DÃªpot APP.
   - Repository on Github.
   - Release on Opam.
   - Announce on OCaml and Sundials lists.

MINOR PATCHES
-------------
2. (Tim/Jun) Add the Dls functions to Cvodes/Idas:
     set_dense_jac_fn
     clear_dense_jac_fn
     set_band_jac_fn
     clear_band_jac_fn
   and the Spils functions:
     set_preconditioner
     set_jac_times_vec_fn
     clear_jac_times_vec_fn

   and just provide a reinit function.

   In the doc, mention that these don't reset performance counters.
   But they're discouraged otherwise.


DONE 5. Rename Carray to Realarray?
DONE 6. Rename create functions to make?

7. Using spgmr linear solver with prec_setup = None and prec_solve = Some
   crashes.

8. Check that Callback.register "" are consistent with C code.

9. Flatten out jacobian_arg

TO DISCUSS
----------
* Should we check consistency of vector lengths?

  - To do this generically, we need a new function in nvector_*.ml to compare
    array lengths.

  - C-implemented comparator as third field of nvector type.  Provide
    NULL for custom nvectors (which will be implemented in OCaml so
    are safe anyway).

  - unify CHECK_MATRIX_ACCESS with SAFETY_CHECKS

