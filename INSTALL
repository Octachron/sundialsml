OCaml interface to Sundials (-CVODE and -IDA)
---------------------------------------------

Timothy Bourke (Inria), Jun Inoue (Inria), and Marc Pouzet (LIENS)

Released under a GPL2 license, see LICENSE.

Please send feedback and bug reports to tim@tbrk.org.

Requirements
------------
* OCaml 3.12.0 or above.
* Sundials 2.5.0 (see below).
* Gnu Make
* C compiler and preprocesser (gcc recommended)

Compilation and Installation of Sundials
----------------------------------------
* Sundials can be downloaded from:
  https://computation.llnl.gov/casc/sundials/download/download.html

* Sundials can be built and installed using the standard instructions that
  come with it. We recommend also building and installing the examples (see
  additional notes in ./examples/sundials/README), and the shared libraries:

    ./configure CC=gcc F77=gfortran --enable-examples --enable-shared
    make

  Note that the OCaml interface assumes 64-bit floats. This means that
  Sundials must be compiled so that realtype = double (i.e. ./configure
  -with-precision=double, which is anyway the default).

  The C compiler must use a 32-bit int type (or an exception will be thrown
  at runtime).

* The Lapack versions of the Dense (LapackDense) and banded (LapackBand)
  linear solvers require two things:

  1. That Sundials is built with the appropriate options, e.g.:
	--with-blas=SimTKlapack --with-lapack=SimTKlapack
     (replace SimTKlapack with the appropriate LAPACK library.)

  2. That the variable LAPACK_LIB in Makefile.inc is set to this library, e.g:
	LAPACK_LIB = -lSimTKlapack
     (otherwise exceptions will be thrown at compile time:
	 Error: Error on dynamically loaded library:
	 ../../dllmlsundials_cvode.so: /usr/local/lib/libsundials_cvode.so.1:
	 undefined symbol: dgbtrs_) 

Compilation and Installation of the library
-------------------------------------------

* Installation:

  1. Run ./configure and verify the detected options.

  2. make

  3. make install
     (This will create a directory called 'sundials' at the path returned by
      'ocamlc -where', and the various .cmi and library files will be copied
      into it. The dllmlsundials_cvode shared library will be copied into the
      stublibs subdirectory.)

     or:
       make ocamlfindinstall
     (This will install the library via "ocamlfind install".)

  The library can be uninstalled with: make uninstall
				   or: ocamlfind remove sundials

* Documentation:
  
  The standard Sundials documentation remains the authoritative source:
  https://computation.llnl.gov/casc/sundials/documentation/documentation.html

  Some supplementary API documentation can also be built with:
	make doc

* Examples:

  The programs in examples/sundials can be used to test the OCaml library
  against results from the standard Sundials examples. See the README file
  in that directory for further information

* Usage (using ocamlfind):

    #use "topfind";;
    #require "sundials";;

    module Cvode = Cvode_serial;;
    let f t y yd = yd.{0} <- 1.0;;
    let g t y gout = gout.{0} <- y.{0};;
    let y = Cvode.Carray.of_array [| -1.0 |];;
    let s = Cvode.init Cvode.Adams Cvode.Functional f (1, g) y;;
    Cvode.set_stop_time s 2.0;;

    (* repeat the commands below to advance the simulation until t = 2.0 *)
    let (t', result) = Cvode.one_step s 2.0 y;;
    Cvode.Carray.print_with_time t' y;;

Common problems
---------------
* Symptom:
  Fatal error: cannot load shared library dllmlsundials_cvode
  Reason: libsundials_cvode.so.1: cannot open shared object file: No such file or directory

  Likely cause:
  The path to the Sundials library is not being searched by the dynamic
  linker.

  Solution:
  Edit LD_LIBRARY_PATH. For example:

    export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}

