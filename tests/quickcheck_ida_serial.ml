module Ida = Ida_serial
module Carray = Ida_serial.Carray
module Roots = Ida.Roots
open Pprint
open Quickcheck
open Quickcheck_ida
open Camlp4.PreCast


(* The test code is generated by Camlp4 and compiled and run in a separate
   process.  This is done for two reasons:

    - In the worst case, IDA segfaults and this is hard to catch cleanly in
      OCaml.  Running it in a separate process saves the main driver loop from
      crashing together with the test case, so that it can shrink and re-run
      the test case.

    - Once we find a bug, we have to present a test case to the user, and a
      directly compilable .ml file is the best way to do it.  So we need code
      generation anyway.  *)

let _loc = Loc.ghost

let semis when_empty ctor = function
  | [] -> when_empty
  | e::es -> ctor (List.fold_left (fun e1 e2 -> Ast.ExSem (_loc, e1, e2)) e es)

let expr_array es = semis <:expr<[||]>> (fun e -> Ast.ExArr (_loc, e)) es

let expr_list es =
  List.fold_right (fun e es -> <:expr<$e$::$es$>>) es <:expr<[]>>

let expr_seq es = semis <:expr<()>> (fun e -> Ast.ExSeq (_loc, e)) es

let expr_of_carray v =
  let n = Carray.length v in
  if n = 0 then <:expr<Carray.create 0>>
  else <:expr<Carray.of_array
              $expr_array (List.map (fun i -> <:expr<$`flo:v.{i}$>>)
                            (enum 0 (n-1)))$>>
let expr_of_linear_solver = function
  | Ida.Dense -> <:expr<Ida.Dense>>
  | Ida.Band range -> <:expr<Ida.Band
                             { Ida.mupper = $`int:range.Ida.mupper$;
                               Ida.mlower = $`int:range.Ida.mlower$; }>>
  | Ida.Sptfqmr _ | Ida.Spbcg _ | Ida.Spgmr _
  | Ida.LapackBand _ | Ida.LapackDense _ ->
    raise (Failure "linear solver not implemented")

let expr_of_resfn_impl = function
  | ResFnLinear slopes ->
    (* forall i. vec'.{i} = slopes.{i} *)
    let neqs = Carray.length slopes in
    let go i = <:expr<res.{$`int:i$}
                         <- vec'.{$`int:i$} -. $`flo:slopes.{i}$>>
    in <:expr<fun t vec vec' res ->
               $expr_seq (List.map go (enum 0 (neqs-1)))$>>
  | ResFnExpDecay coefs ->
    (* forall i. vec'.{i} = - coefs.{i} * vec.{i} *)
    let neqs = Carray.length coefs in
    let go i = <:expr<res.{$`int:i$}
                         <- vec'.{$`int:i$}
                            +. $`flo:coefs.{i}$ *. vec.{$`int:i$}>>
    in <:expr<fun t vec vec' res ->
               $expr_seq (List.map go (enum 0 (neqs-1)))$>>

let jac_expr_of_resfn get set neqs resfn =
  let go =
    match resfn with
    | ResFnLinear slopes ->
      (* forall i. vec'.{i} - slopes.{i} = 0 *)
      fun i j -> if i = j then <:expr<$set$ jac ($`int:i$, $`int:j$) c>>
                 else <:expr<$set$ jac ($`int:i$, $`int:j$) 0.>>
    | ResFnExpDecay coefs ->
      (* forall i. vec'.{i} + coefs.{i} * vec.{i} = 0 *)
      fun i j -> if i = j then <:expr<$set$ jac ($`int:i$, $`int:j$)
                                                (c +. $`flo:coefs.{i}$)>>
                 else <:expr<$set$ jac ($`int:i$, $`int:j$) 0.>>
  and ixs = enum 0 (neqs - 1) in
  <:expr<fun jac_arg jac ->
         let c = jac_arg.Ida.jac_coef in
         $expr_seq (List.concat
                      (List.map (fun i -> List.map (go i) ixs) ixs))$>>

let set_jac model session =
  let neqs = Carray.length model.vec in
  match model.solver with
  | Ida.Dense -> let dense_get = <:expr<Ida.Densematrix.get>>
                 and dense_set = <:expr<Ida.Densematrix.set>>
                 in <:expr<Ida.Dls.set_dense_jac_fn $session$
                           $jac_expr_of_resfn dense_get dense_set neqs
                                              model.resfn$>>
  | Ida.Band _ | Ida.Sptfqmr _ | Ida.Spbcg _ | Ida.Spgmr _
  | Ida.LapackBand _ | Ida.LapackDense _ ->
    raise (Failure "linear solver not implemented")

let expr_of_roots roots =
  let n = Array.length roots in
  let set i =
    match roots.(i) with
    | r, Roots.Rising -> <:expr<g.{$`int:i$} <- t -. $`flo:r$>>
    | r, Roots.Falling -> <:expr<g.{$`int:i$} <- $`flo:r$ -. t>>
    | _, Roots.NoRoot -> assert false
  in
  let f ss i = <:expr<$ss$; $set i$>> in
  if n = 0 then <:expr<Ida.no_roots>>
  else <:expr<($`int:n$,
               (fun t vec vec' g ->
                  $Fstream.fold_left f (set 0)
                    (Fstream.enum 1 (n-1))$))>>

let expr_of_root_direction = function
  | RootDirs.Increasing -> <:expr<Ida.RootDirs.Increasing>>
  | RootDirs.Decreasing -> <:expr<Ida.RootDirs.Decreasing>>
  | RootDirs.IncreasingOrDecreasing ->
    <:expr<Ida.RootDirs.IncreasingOrDecreasing>>

let expr_of_root_event = function
  | Roots.Rising -> <:expr<Roots.Rising>>
  | Roots.Falling -> <:expr<Roots.Falling>>
  | Roots.NoRoot -> <:expr<Roots.NoRoot>>

let expr_of_root_info rs =
  <:expr<Roots.of_array $expr_array (List.map expr_of_root_event
                                       (Roots.to_list rs))$>>

(* Generate the test code that executes a given command.  *)
let expr_of_cmd_impl = function
  | SolveNormal t ->
    <:expr<let tret, flag = Ida.solve_normal session $`flo:t$ vec vec' in
           Aggr [Float tret; SolverResult flag; carray vec; carray vec']>>
  | CalcIC_Y (t, GetCorrectedIC) ->
    <:expr<Ida.calc_ic_y session ~y:vec $`flo:t$;
           carray vec>>
  | CalcIC_Y (t, Don'tGetCorrectedIC) ->
    <:expr<Ida.calc_ic_y session $`flo:t$;
           Unit>>
  | CalcIC_Y (t, GiveBadVector n) ->
    <:expr<let bad_vec = Carray.create $`int:n$ in
           Ida.calc_ic_y session ~y:bad_vec $`flo:t$;
           Unit>>
  | GetRootInfo ->
    <:expr<let roots = Ida.Roots.create (Ida.nroots session) in
           Ida.get_root_info session roots;
           RootInfo roots>>
  | GetNRoots ->
    <:expr<Int (Ida.nroots session)>>
  | SetAllRootDirections dir ->
    <:expr<Ida.set_all_root_directions session $expr_of_root_direction dir$;
           Unit>>
  | SetRootDirection dirs ->
    <:expr<Ida.set_root_direction session
           $expr_array (List.map expr_of_root_direction (Array.to_list dirs))$;
           Unit>>

let expr_of_cmds_impl = function
  | [] -> <:expr<()>>
  | cmds ->
    let sandbox exp = <:expr<do_cmd (lazy $exp$)>> in
    expr_seq (List.map (fun cmd -> sandbox (expr_of_cmd_impl cmd))
                cmds)

let expr_of_solver_result = function
  | Ida.Continue -> <:expr<Ida.Continue>>
  | Ida.RootsFound -> <:expr<Ida.RootsFound>>
  | Ida.StopTimeReached -> <:expr<Ida.StopTimeReached>>

let expr_of_exn = function
  | Invalid_argument msg -> <:expr<Invalid_argument $`str:msg$>>
  | Not_found -> <:expr<Not_found>>
  | Ida.IllInput -> <:expr<Ida.IllInput>>
  | Ida.TooMuchWork -> <:expr<Ida.TooMuchWork>>
  | Ida.TooClose -> <:expr<Ida.TooClose>>
  | Ida.TooMuchAccuracy -> <:expr<Ida.TooMuchAccuracy>>
  | Ida.ErrFailure -> <:expr<Ida.ErrFailure>>
  | Ida.ConvergenceFailure -> <:expr<Ida.ConvergenceFailure>>
  | Ida.LinearSetupFailure -> <:expr<Ida.LinearSetupFailure>>
  | Ida.LinearInitFailure -> <:expr<Ida.LinearInitFailure>>
  | Ida.LinearSolveFailure -> <:expr<Ida.LinearSolveFailure>>
  | Ida.FirstResFuncFailure -> <:expr<Ida.FirstResFuncFailure>>
  | Ida.RepeatedResFuncErr -> <:expr<Ida.RepeatedResFuncErr>>
  | Ida.UnrecoverableResFuncErr -> <:expr<Ida.UnrecoverableResFuncErr>>
  | Ida.RootFuncFailure -> <:expr<Ida.RootFuncFailure>>
  | Ida.BadK -> <:expr<Ida.BadK>>
  | Ida.BadT -> <:expr<Ida.BadT>>
  | Ida.BadDky -> <:expr<Ida.BadDky>>
  | _ -> assert false

let rec expr_of_result = function
  | Unit -> <:expr<Unit>>
  | Int n -> <:expr<Int $`int:n$>>
  | Float f -> <:expr<Float $`flo:f$>>
  | Any -> <:expr<Any>>
  | Type r -> <:expr<Type $expr_of_result r$>>
  | Aggr rs -> <:expr<Aggr $expr_list (List.map expr_of_result rs)$>>
  | Carray v -> <:expr<Carray $expr_of_carray v$>>
  | SolverResult s -> <:expr<SolverResult $expr_of_solver_result s$>>
  | Exn e -> <:expr<Exn $expr_of_exn e$>>
  | RootInfo r -> <:expr<RootInfo $expr_of_root_info r$>>

let expr_of_results rs = expr_list (List.map expr_of_result rs)

let expr_of_option expr_of_contents = function
  | None -> <:expr<None>>
  | Some x -> <:expr<Some $expr_of_contents x$>>

let expr_of_array expr_of_elem a =
  let f e1 = function
    | Ast.ExNil _ -> expr_of_elem e1
    | e2 -> Ast.ExSem (_loc, expr_of_elem e1, e2)
  in
  match Array.fold_right f a (Ast.ExNil _loc) with
  | Ast.ExNil _ -> <:expr<[||]>>
  | e -> Ast.ExArr (_loc, e)

let expr_of_list expr_of_elem es =
  List.fold_left
    (fun es e -> <:expr<$expr_of_elem e$::$es$>>)
    <:expr<[]>>
    (List.rev es)

let expr_of_pair expr_of_fst expr_of_snd (x,y) =
  <:expr<$expr_of_fst x$, $expr_of_snd y$>>

let expr_of_float x = <:expr<$`flo:x$>>

let expr_of_resfn = function
  | ResFnLinear slopes -> <:expr<ResFnLinear $expr_of_carray slopes$>>
  | ResFnExpDecay coefs -> <:expr<ResFnExpDecay $expr_of_carray coefs$>>

let expr_of_model model =
  <:expr<
    {
      resfn = $expr_of_resfn model.resfn$;
      solver = $expr_of_linear_solver model.solver$;
      solving = $`bool:model.solving$;
      consistent = $`bool:model.consistent$;
      last_query_time = $`flo:model.last_query_time$;
      next_query_time = $expr_of_option expr_of_float model.next_query_time$;
      last_tret = $`flo:model.last_tret$;
      roots = $expr_of_array (expr_of_pair expr_of_float expr_of_root_event)
                 model.roots$;
      root_dirs = $expr_of_array expr_of_root_direction model.root_dirs$;
      root_info = $expr_of_root_info model.root_info$;
      root_info_valid = $`bool:model.root_info_valid$;
      vec = $expr_of_carray model.vec$;
      vec' = $expr_of_carray model.vec'$;
      vec0 = $expr_of_carray model.vec0$;
      vec'0 = $expr_of_carray model.vec'0$;
      t0 = $`flo:model.t0$;
    }
    >>

let expr_of_ic_buf = function
  | GetCorrectedIC -> <:expr<GetCorrectedIC>>
  | Don'tGetCorrectedIC -> <:expr<Don'tGetCorrectedIC>>
  | GiveBadVector n -> <:expr<GiveBadVector $`int:n$>>

let expr_of_cmd = function
  | SolveNormal f -> <:expr<SolveNormal $`flo:f$>>
  | GetRootInfo -> <:expr<GetRootInfo>>
  | SetRootDirection root_dirs ->
    <:expr<SetRootDirection $expr_of_array expr_of_root_direction root_dirs$>>
  | SetAllRootDirections root_dir ->
    <:expr<SetAllRootDirections $expr_of_root_direction root_dir$>>
  | GetNRoots -> <:expr<GetNRoots>>
  | CalcIC_Y (t, ic_buf) ->
    <:expr<CalcIC_Y ($`flo:t$, $expr_of_ic_buf ic_buf$)>>

let ml_of_script (model, cmds) =
  let nsteps = List.length cmds in
  let step_width = String.length (string_of_int nsteps) in
  <:str_item<
    module Ida = Ida_serial
    module Carray = Ida.Carray
    open Quickcheck_ida
    open Pprint
    let marshal_results = ref false
    let just_cmp = ref false
    let step = ref 0
    let model = $expr_of_model model$
    let cmds = $expr_of_array expr_of_cmd (Array.of_list cmds)$
    let do_cmd, finish = ida_test_case_driver model cmds
    let _ =
      let vec  = $expr_of_carray model.vec0$
      and vec' = $expr_of_carray model.vec'0$ in
      let session = Ida.init_at_time
                  $expr_of_linear_solver model.solver$
                  $expr_of_resfn_impl model.resfn$
                  $expr_of_roots model.roots$
                  $`flo:model.t0$
                  vec vec'
      in
      Ida.ss_tolerances session 1e-9 1e-9;
      $set_jac model <:expr<session>>$;
      do_cmd (lazy (Aggr [Float (Ida.get_current_time session);
                          carray vec; carray vec']));
      [||].(0) <- 0;
      $expr_of_cmds_impl cmds$;
      exit (finish ())
   >>

let randseed =
  Random.self_init ();
  ref (Random.int ((1 lsl 30) - 1))

let ml_file_of_script script src_file =
  Camlp4.PreCast.Printers.OCaml.print_implem ~output_file:src_file
    (ml_of_script script);
  let chan = open_out_gen [Open_text; Open_append; Open_wronly] 0 src_file in
  Printf.fprintf chan "\n(* generated with random seed %d, test case %d *)\n"
    !randseed !test_case_number;
  close_out chan

;;
let _ =
  let max_tests = ref 50 in
  let options = [("--exec-file", Arg.Set_string test_exec_file,
                  "test executable name \
                   (must be absolute, prefixed with ./, or on path)");
                 ("--failed-file", Arg.Set_string test_failed_file,
                  "file in which to dump the failed test case");
                 ("--compiler", Arg.Set_string test_compiler,
                  "compiler name with compilation options");
                 ("--rand-seed", Arg.Set_int randseed,
                  "seed value for random generator");
                 ("--verbose", Arg.Set verbose,
                  "print each test script before trying it");
                 ("--read-write-invariance", Arg.Set read_write_invariance,
                  "print data in a format that can be fed to ocaml toplevel");
                ] in
  Arg.parse options (fun n -> max_tests := int_of_string n)
    "randomly generate programs using IDA and check if they work as expected";

  Printf.printf "random generator seed value = %d\n" !randseed;
  flush stdout;
  Random.init !randseed;
  size := 1;
  quickcheck_ida ml_file_of_script !max_tests

