#! /bin/sh

sysname='Sundials ML'
version=0.9.1
contact='tim@tbrk.org'

prefix=/usr/local/
unset libdir
unset stubdir
unset docdir
unset install_docs
unset enable_mpi

for option in "$@"
do
    name=`expr "$option" : "\([^=]*\).*"`
    value=`expr "$option" : ".*=\(.*\)"`

    case "$name" in
    --prefix)
	prefix="${value%/}/";;
    --libdir)
	libdir="${value%/}/";;
    --stubdir)
	stubdir="${value%/}/";;
    --docdir)
	docdir="${value%/}/";;
    --disable-doc)
	install_docs=0;;
    --enable-mpi)
	enable_mpi=1
	mpicc="${mpicc:-${value}}";;
    --no-lib-path)
	no_lib_path=1;;
    --no-safety-checks)
	bounds_checking=0
	safety_checks=0;;
    --no-bounds-checking)
	bounds_checking=0;;
    -h|--help)
	cat <<-END_HELP_TEXT
	'configure' configures $sysname $version to adapt to many kinds of systems.

	Usage: $0 [OPTION]... [VAR=VALUE]...

	To assign environment variables (e.g., CC, CFLAGS...), specify them as
	VAR=VALUE.  See below for descriptions of some of the useful variables.

	Defaults for the options are specified in brackets.

	Configuration:
	  -h, --help              display this help and exit

	Installation directories:
	  --prefix=PREFIX         install architecture-independent files in PREFIX
	                          [$prefix]

	For better control, use the options below.

	Fine tuning of the installation directories:
	  --libdir=DIR		 installation directory [OCAML]
	  --stubdir=DIR		 stub installation directory [OCAML/stublibs]
	  --docdir=DIR           documentation [PREFIX/share/doc]

	Optional Features:
	  --disable-doc          do not install html documentation
	  --enable-mpi		 build with parallel features
	  --no-lib-path          do not record paths in the OCaml library
	  --no-safety-checks     no safety checks; implies --no-bounds-checking
	  --no-bounds-checking   no bounds checking in matrix accesses

	Some influential environment variables:
	  OCAMLROOT     Path to OCaml installation
	  LAPACKLIB	Command for linking with Lapack (default: -llapack)
		                (sometimes also: -lSimTKlapack)
	  EXAMPLES	Path to installed examples (for comparison with Sundials).
	  OCAMLMPI	Path to OCamlMPI installation
	  MPICC		Name of the MPI compiler (default: mpicc; implies --enable-mpi)

	Use these variables to override the choices made by 'configure' or to help
	it to find libraries and programs with nonstandard names/locations.

	Report bugs to <$contact>.

END_HELP_TEXT
	exit 0
	;;
    OCAMLROOT)
	OCAMLROOT="${value%/}/"
	OCAMLBIN="${OCAMLROOT}bin/";;
    LAPACKLIB)
	LAPACKLIB="${value}";;
    EXAMPLES)
	EXAMPLESROOT="${value}";;
    CFLAGS)
	cflags="${value}";;
    LDFLAGS)
	ldflags="${value}";;
    OCAMLMPI)
	OCAMLMPI="${value}";;
    OCAMLFLAGS)
	ocamlflags="${value}";;
    OCAMLOPTFLAGS)
	ocamloptflags="${value}";;
    OCAMLMKLIBFLAGS)
	ocamlmklibflags="${value}";;
    MPICC)
	mpicc="${value}"
	enable_mpi=1;;
    *)
	printf "illegal option \"$option\".\n" 1>&2; exit 2;;
    esac
done

CPPFLAGS="${CPPFLAGS} `sundials-config -m cvode -t s -l c -s cppflags`"
CC=${CC:-cc}
CPP=${CPP:-cpp}
LAPACKLIB=${LAPACKLIB:-"-llapack"}
EXAMPLESROOT=${EXAMPLESROOT:-"/usr/local/examples"}
error=""

bounds_checking=${bounds_checking:-1}
safety_checks=${safety_checks:-1}

# Check for opam
if command -v opam >/dev/null 2>&1; then
    opam_libpath="$(opam config var lib)/"
else
    opam_libpath=''
fi

# Check for OCaml installation (and version)
ocaml_path=`${OCAMLBIN}ocamlc -where`
ocaml_version=`${OCAMLBIN}ocamlc -version`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find ocamlc"
    ocaml_path='NOT FOUND'
    ocaml_version=''
    ocaml_libpath=''
    ocaml_3x=''
else
    case "${ocaml_version}" in
	[0-2].*.* | 3.0* | 3.[2-9].* | 3.10.* | 3.11.*)
	    error="${error}\n\tocaml >= 3.12.0 required" ;;
	*) ;;
    esac

    case "${ocaml_version}" in
	3.*) ocaml_3x=1 ;;
	*) ocaml_3x=0 ;;
    esac

    ocaml_libpath="${ocaml_path%/}/"
    ocaml_version=" (${ocaml_version})"
fi

# Check for OCamlMPI installation
ocamlmpi="${OCAMLMPI:-${ocaml_libpath}mpi}"
if [ ${enable_mpi:-0} -eq 0 ]; then
    ocamlmpi_enabled=
    ocamlmpi='NOT ENABLED (--enable-mpi for parallel features)'
else
    ocamlmpi_enabled=1
    if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
	ocamlmpi="${ocaml_libpath}site-lib/mpi"
	if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
	    ocamlmpi="${opam_libpath}mpi"
	    if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
		ocamlmpi='NOT FOUND (no parallel features)'
		ocamlmpi_enabled=
	    fi
	fi
    fi
fi
if [ ${ocamlmpi_enabled} -eq 1 ]; then
    ocamlmpi_path="$ocamlmpi"
    ocamlmpi="${ocamlmpi} (compiler: ${mpicc:-mpicc})"
else
    ocamlmpi_path=''
fi

# Check for Sundials installation (and version)
unset lapack_lib
query="#include \"sundials/sundials_config.h\"\nSUNDIALS_PACKAGE_VERSION,SUNDIALS_BLAS_LAPACK"
sundials_info=`echo "${query}" | ${CPP} ${CPPFLAGS} -P | tail -1`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find sundials_config.h"
    sundials_version="UNKNOWN"
else
    sundials_version=`echo ${sundials_info} | sed -ne 's/"\(.*\)",./\1/p'`

    case "${sundials_version}" in
	[0-1].*.* | 2.[0-4].*)
	    error="${error}\n\tsundials >= 2.5.0 required" ;;
	*) ;;
    esac

    case "${sundials_info}" in
	*,1)
	    lapack_lib=${LAPACKLIB}
	    ;;
	*,0)
	    unset lapack_lib ;;
	*)
	    error"${error}\n\terror interpreting sundials_config.h" ;;
    esac
fi

query="#include <caml/mlvalues.h>\nSIZEOF_INT,SIZEOF_LONG,SIZEOF_PTR"
ilp_size=`echo ${query} | ${CPP} -P | tail -1`
int_size=`expr "$ilp_size" : "^\([^,]*\),*"`
long_size=`expr "$ilp_size" : "^[^,]*,\([^,]*\),*"`
ptr_size=`expr "$ilp_size" : "^[^,]*,[^,]*,\([^,]*\)"`
if echo $int_size | grep -q '[^0-9]'; then
    printf "Failed to detect size of \`int'.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi
if echo $long_size | grep -q '[^0-9]'; then
    printf "Failed to detect size of \`long'.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi
if echo $ptr_size | grep -q '[^0-9]'; then
    printf "Failed to detect size of pointers.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi


# Check if we can compile a direct call to caml_weak_get from C.  Usually we
# can, but it doesn't seem to be supported officially.  Note that a .c + .ml
# pair is infinitely easier to compile portably than a standalone .c file.
cat > weak_get.c <<EOF
/* This file tests if we can call caml_weak_get() directly from C.  */
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/alloc.h>

CAMLprim value caml_weak_get (value ar, value n);
CAMLprim value caml_weak_set (value ar, value n, value el);
CAMLprim value caml_weak_create (value len);
#define None_val (Val_int(0))
#define Some_tag 0

CAMLprim value f ()
{
  CAMLparam0 ();
  CAMLlocal3 (table, x, y);

  table = caml_weak_create (Val_int (1));
  x = caml_weak_get (table, Val_int (0));
  if (x != None_val)
    CAMLreturn (Val_int (1));

  y = caml_alloc_small (1, Some_tag);
  Field (y, 0) = Val_int (42);
  caml_weak_set (table, Val_int (0), y);
  x = caml_weak_get (table, Val_int (0));
  if (!Is_block (x) || Tag_val(x) != Some_tag || Field (x,0) != Field(y,0))
    CAMLreturn (Val_int (2));

  caml_weak_set (table, Val_int (0), None_val);
  x = caml_weak_get (table, Val_int (0));
  if (x != None_val)
    CAMLreturn (Val_int (3));

  CAMLreturn (Val_int (0));
}
EOF
cat > weak_get_main.ml <<EOF
external f : unit -> int = "f"
let _ = exit (f ())
EOF
if ${OCAMLBIN}ocamlc weak_get.c weak_get_main.ml -o weak_get -custom \
    2>&1 > /dev/null && ./weak_get; then
    have_weak=1
else
    have_weak=0
fi
rm -f weak_get.c weak_get.o \
      weak_get_main.ml weak_get_main.cmi weak_get_main.cmo weak_get

if [ "${long_size}" -ne "${ptr_size}" ]; then
    error="${error}\nsizeof (long) does not match sizeof (void*)."
    error="${error}\nStarting with SUNDIALS version 2.5.0, DenseGETRF() and"
    error="${error}\nsimilar functions require arrays of longs as input,"
    error="${error}\nso this binding needs to map C's long * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int entries,"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user.  As a downside, this requires C's long type"
    error="${error}\nto have the same size as OCaml values, i.e. the same size"
    error="${error}\nas pointers.  The only platform known to violate this"
    error="${error}\nrequirement is Microsoft Visual C on 64-bit Windows"
    error="${error}\n(Win64).  If you must use this binding on 64-bit Windows,"
    error="${error}\ntry compiling SUNDIALS and the binding with Cygwin.  If"
    error="${error}\nusing Cygwin is not an option, write to us and we may"
    error="${error}\nbe able to hack together a workaround for Win64, albeit"
    error="${error}\nwith a slight performance hit."
fi
if [ "${int_size}" -ne 4 ]; then
    error="${error}\nint is not 32 bits on this platform."
    error="${error}\nSome SUNDIALS functions require arrays of ints as input,"
    error="${error}\nso this binding needs to map C's int * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int32 entries"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user, provided that C's int type is 32 bits.  This"
    error="${error}\nis the case with most, if not all, 32-bit and 64-bit"
    error="${error}\nsystems, and we were not aware of any platforms that are "
    error="${error}\nstill in use which violate this requirement.  However, it"
    error="${error}\nlooks like you have such a platform.  Please inform us"
    error="${error}\nabout your platform and we may be able to hack together a"
    error="${error}\nworkaround, albeit with a slight performance hit."
fi

if [ "${lapack_lib}" = "" ]; then
    lapack_info=" (without lapack)"
else
    lapack_info=" (with lapack: ${lapack_lib})"
fi

ldflags="${ldflags} ${lapack_lib}"

# Extract compilation flags from sundials-config.

cvode_cppflags="${cflags} `sundials-config -m cvode -t s -l c -s cppflags`"
cvodes_cppflags="${cflags} `sundials-config -m cvodes -t s -l c -s cppflags`"
ida_cppflags="${cflags} `sundials-config -m ida -t s -l c -s cppflags`"
kinsol_cppflags="${cflags} `sundials-config -m kinsol -t s -l c -s cppflags`"

# --no-lib-path removes the -L specification, to prevent it from being recorded
# in the *.cm(x)a files.  We assume there's only one occurrence of -L and the
# path contains no spaces.
if [ ${no_lib_path:-0} -eq 1 ]; then
    cvode_ldflags="`sundials-config -m cvode -t s -l c -s libs \
	            | sed -e 's#-L[^ ]* -#-#'`"
    cvodes_ldflags="`sundials-config -m cvodes -t s -l c -s libs \
	             | sed -e 's#-L[^ ]* -#-#'`"
    ida_ldflags="`sundials-config -m ida -t s -l c -s libs \
	          | sed -e 's#-L[^ ]* -#-#'`"
    kinsol_ldflags="`sundials-config -m kinsol -t s -l c -s libs \
	          | sed -e 's#-L[^ ]* -#-#'`"
else
    cvode_ldflags="`sundials-config -m cvode -t s -l c -s libs`"
    cvodes_ldflags="`sundials-config -m cvodes -t s -l c -s libs`"
    ida_ldflags="`sundials-config -m ida -t s -l c -s libs`"
    kinsol_ldflags="`sundials-config -m kinsol -t s -l c -s libs`"
fi

arch=`uname -i`
case ${arch} in
    x86_64)
	cflags="${cflags} -fPIC"
	;;
    *)
        :
	;;
esac

# Check for Sundials examples
if [ -d "$EXAMPLESROOT/cvode/serial" ]; then
    examples_info="$EXAMPLESROOT"
else
    examples_info="NOT FOUND"
fi

# Show a summary

printf "\nConfiguration\n-------------\n\n"

printf "  OCaml\t\t\t${ocaml_path}${ocaml_version}\n"
printf "  Sundials\t\t${sundials_version}${lapack_info}\n"
printf "    -examples\t\t${examples_info}\n"
printf "  OCamlMPI\t\t${ocamlmpi}\n"
printf "\n"
printf "  Architecture\t\t${arch}\n"
printf "\n"
printf "Installation paths\n"
printf "  prefix:\t\t${prefix}\n"
printf "  libdir:\t\t${libdir:-${ocaml_libpath}}\n"
printf "  stubdir:\t\t${stubdir:-${ocaml_libpath}stublibs/}\n"
if [ ${install_docs:-1} -eq 1 ]; then
    printf "  docdir:\t\t${docdir:-${prefix}share/doc/}\n"
fi
if [ ${no_lib_path:-0} -eq 1 ]; then
    printf "\n"
    printf "Other options\n"
    printf "  --no-lib-path given.  Make sure you know what you're doing!\n"
fi
printf "\n"

if [ -n "${error}" ]; then
    printf "Some errors occurred during configuration:${error}\n\n"
    exit 1
fi

(printf "# # # THIS FILE IS GENERATED AUTOMATICALLY BY CONFIGURE # # #\n"; \
 sed -e "s#@prefix@#${prefix}#;
	 s#@version@#${version}#;
	 s#@libdir@#${libdir:-${ocaml_libpath}}#;
	 s#@stubdir@#${stubdir:-${ocaml_libpath}stublibs/}#;
	 s#@docdir@#${docdir:-${prefix}share/doc/}#;
	 s#@install_docs@#${install_docs:-1}#;
	 s#@cflags@#${cflags}#;
	 s#@cppflags@#${cppflags}#;
	 s#@ldflags@#${ldflags}#;
	 s#@cvode_cppflags@#${cvode_cppflags}#;
	 s#@cvodes_cppflags@#${cvodes_cppflags}#;
	 s#@ida_cppflags@#${ida_cppflags}#;
	 s#@cvode_ldflags@#${cvode_ldflags}#;
	 s#@cvodes_ldflags@#${cvodes_ldflags}#;
	 s#@ida_ldflags@#${ida_ldflags}#;
	 s#@kinsol_cppflags@#${kinsol_cppflags}#;
	 s#@kinsol_ldflags@#${kinsol_ldflags}#;
	 s#@ocamlflags@#${ocamlflags}#;
	 s#@ocamloptflags@#${ocamloptflags}#;
	 s#@ocaml_3x@#${ocaml_3x}#;
	 s#@ocamlmklibflags@#${ocamlmklibflags}#;
	 s#@bounds_checking@#${bounds_checking}#;
	 s#@ocamlmpi_path@#${ocamlmpi_path}#;
	 s#@ocamlmpi_enabled@#${ocamlmpi_enabled}#;
	 s#@mpicc@#${mpicc:-mpicc}#;
	 s#@EXAMPLESROOT@#${EXAMPLESROOT}#;
	 s#@OCAMLBIN@#${OCAMLBIN}#;
	 s#@OCAMLROOT@#${OCAMLROOT}#;" config.in) > config

printf "/* Automatically generated file - don't edit!  See configure.  */\n"\
     > config.h
printf "#ifndef __SUNDIALS_CONFIG_H__\n" >> config.h
printf "#define __SUNDIALS_CONFIG_H__\n" >> config.h
printf "#define HAVE_WEAK ${have_weak}\n" >> config.h
printf "#define SAFETY_CHECKS ${safety_checks}\n" >> config.h
printf "#define CHECK_MATRIX_ACCESS ${bounds_checking}\n" >> config.h
printf "#endif /* __SUNDIALS_CONFIG_H__ */\n" >> config.h

