#! /bin/sh

sysname='Sundials ML'
version=0.9.1
contact='tim@tbrk.org'

prefix=/usr/local/
unset libdir
unset stubdir
unset docdir
unset install_docs

for option in $*
do
    name=`expr "$option" : "\([^=]*\).*"`
    value=`expr "$option" : ".*=\(.*\)"`

    case "$name" in
    --prefix)
	prefix="${value%/}/";;
    --libdir)
	libdir="${value%/}/";;
    --stubdir)
	stubdir="${value%/}/";;
    --docdir)
	docdir="${value%/}/";;
    --disable-doc)
	install_docs=0;;
    -h|--help)
	cat <<-END_HELP_TEXT
	'configure' configures $sysname $version to adapt to many kinds of systems.

	Usage: $0 [OPTION]... [VAR=VALUE]...

	To assign environment variables (e.g., CC, CFLAGS...), specify them as
	VAR=VALUE.  See below for descriptions of some of the useful variables.

	Defaults for the options are specified in brackets.

	Configuration:
	  -h, --help              display this help and exit

	Installation directories:
	  --prefix=PREFIX         install architecture-independent files in PREFIX
				  [$prefix]

	For better control, use the options below.

	Fine tuning of the installation directories:
	  --libdir=DIR		 installation directory [OCAML]
	  --stubdir=DIR		 stub installation directory [OCAML/stublibs]
	  --docdir=DIR           documentation [PREFIX/share/doc]

	Optional Features:
	  --disable-doc          do not install html documentation

	Some influential environment variables:
	  OCAMLROOT     Path to ocaml installation
	  LAPACKLIB	Command for linking with Lapack (default: -llapack)
			(sometimes also: -lSimTKlapack)
	  EXAMPLES	Path to installed examples (for comparison with Sundials).

	Use these variables to override the choices made by 'configure' or to help
	it to find libraries and programs with nonstandard names/locations.

	Report bugs to <$contact>.

END_HELP_TEXT
	exit 0
	;;
    OCAMLROOT)
	OCAMLROOT="${value%/}/"
	OCAMLBIN="${OCAMLROOT}bin/";;
    LAPACKLIB)
	LAPACKLIB="${value}";;
    EXAMPLES)
	EXAMPLESROOT="${value}";;
    CFLAGS)
	cflags="${value}";;
    OCAMLFLAGS)
	ocamlflags="${value}";;
    *)
	echo "illegal option \"$option\"." 1>&2; exit 2;;
    esac
done

CPPFLAGS="${CPPFLAGS} `sundials-config -m cvode -t s -l c -s cppflags`"
CPP=${CPP:-cpp}
LAPACKLIB=${LAPACKLIB:-"-llapack"}
EXAMPLESROOT=${EXAMPLESROOT:-"/usr/local/examples"}
error=""

# Check for OCaml installation (and version)
ocaml_path=`${OCAMLBIN}ocamlc -where`
ocaml_version=`${OCAMLBIN}ocamlc -version`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find ocamlc"
    ocaml_path='NOT FOUND'
    ocaml_version=''
    ocaml_libpath=''
else
    case "${ocaml_version}" in
	[0-2].*.* | 3.0* | 3.[2-9].* | 3.10.* | 3.11.*)
	    error="${error}\n\tocaml >= 3.12.0 required" ;;
	*) ;;
    esac

    ocaml_libpath="${ocaml_path%/}/"
    ocaml_version=" (${ocaml_version})"
fi

# Check for Sundials installation (and version)
unset lapack_lib
query="#include \"sundials/sundials_config.h\"\nSUNDIALS_PACKAGE_VERSION,SUNDIALS_BLAS_LAPACK"
sundials_info=`echo "${query}" | ${CPP} ${CPPFLAGS} -P | tail -1`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find sundials_config.h"
    sundials_version="UNKNOWN"
else
    sundials_version=`echo ${sundials_info} | sed -ne 's/"\(.*\)",./\1/p'`

    case "${sundials_version}" in
	[0-1].*.* | 2.[0-4].*)
	    error="${error}\n\tsundials >= 2.5.0 required" ;;
	*) ;;
    esac

    case "${sundials_info}" in
	*,1)
	    lapack_lib=${LAPACKLIB}
	    ;;
	*,0)
	    unset lapack_lib ;;
	*)
	    error"${error}\n\terror interpreting sundials_config.h" ;;
    esac
fi

query="#include <caml/mlvalues.h>\nSIZEOF_INT,SIZEOF_LONG,SIZEOF_PTR"
ilp_size=`echo ${query} | ${CPP} -P | tail -1`
int_size=`expr "$ilp_size" : "^\([^,]*\),*"`
long_size=`expr "$ilp_size" : "^[^,]*,\([^,]*\),*"`
ptr_size=`expr "$ilp_size" : "^[^,]*,[^,]*,\([^,]*\)"`
if echo $int_size | grep -q '[^0-9]'; then
    echo "Failed to detect size of \`int'.  This might be a problem"
    echo "with detecting your system's C preprocessor."
    echo
    exit 1
fi
if echo $long_size | grep -q '[^0-9]'; then
    echo "Failed to detect size of \`long'.  This might be a problem"
    echo "with detecting your system's C preprocessor."
    echo
    exit 1
fi
if echo $ptr_size | grep -q '[^0-9]'; then
    echo "Failed to detect size of pointers.  This might be a problem"
    echo "with detecting your system's C preprocessor."
    echo
    exit 1
fi

if [ "${long_size}" -ne "${ptr_size}" ]; then
    error="${error}\nsizeof (long) does not match sizeof (void*)."
    error="${error}\nStarting with SUNDIALS version 2.5.0, DenseGETRF() and"
    error="${error}\nsimilar functions require arrays of longs as input,"
    error="${error}\nso this binding needs to map C's long * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int entries,"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user.  As a downside, this requires C's long type"
    error="${error}\nto have the same size as OCaml values, i.e. the same size"
    error="${error}\nas pointers.  The only platform known to violate this"
    error="${error}\nrequirement is Microsoft Visual C on 64-bit Windows"
    error="${error}\n(Win64).  If you must use this binding on 64-bit Windows,"
    error="${error}\ntry compiling SUNDIALS and the binding with Cygwin.  If"
    error="${error}\nusing Cygwin is not an option, write to us and we may"
    error="${error}\nbe able to hack together a workaround for Win64, albeit"
    error="${error}\nwith a slight performance hit."
fi
if [ "${int_size}" -ne 4 ]; then
    error="${error}\nint is not 32 bits on this platform."
    error="${error}\nSome SUNDIALS functions require arrays of ints as input,"
    error="${error}\nso this binding needs to map C's int * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int32 entries"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user, provided that C's int type is 32 bits.  This"
    error="${error}\nis the case with most, if not all, 32-bit and 64-bit"
    error="${error}\nsystems, and we were not aware of any platforms that are "
    error="${error}\nstill in use which violate this requirement.  However, it"
    error="${error}\nlooks like you have such a platform.  Please inform us"
    error="${error}\nabout your platform and we may be able to hack together a"
    error="${error}\nworkaround, albeit with a slight performance hit."
fi

if [ "${lapack_lib}" = "" ]; then
    lapack_info=" (without lapack)"
else
    lapack_info=" (with lapack: ${lapack_lib})"
fi

cflags="${cflags} `sundials-config -m cvode -t s -l c -s cppflags`"
ldflags="${ldflags} `sundials-config -m cvode -t s -l c -s libs` ${lapack_lib}"

arch=`uname -i`
case ${arch} in
    x86_64)
	cflags="${cflags} -fPIC"
	;;
    *)
        :
	;;
esac

# Check for Sundials examples
if [ -d "$EXAMPLESROOT/cvode/serial" ]; then
    examples_info="$EXAMPLESROOT"
else
    examples_info="NOT FOUND"
fi

# Show a summary

echo
echo "Configuration"
echo "-------------"

echo
echo "  Ocaml\t\t\t${ocaml_path}${ocaml_version}"
echo "  Sundials\t\t${sundials_version}${lapack_info}"
echo "    -examples\t\t${examples_info}"
echo
echo "  Architecture\t\t${arch}"
echo
echo "Installation paths"
echo "  prefix:\t\t${prefix}"
echo "  libdir:\t\t${libdir:-${ocaml_libpath}}"
echo "  stubdir:\t\t${stubdir:-${ocaml_libpath}stublibs/}"
if [ ${install_docs:-1} -eq 1 ]; then
    echo "  docdir:\t\t${docdir:-${prefix}share/doc/}"
fi
echo

if [ -n "${error}" ]; then
    echo "Some errors occurred during configuration:${error}"
    echo
    exit 1
fi

(echo "# # # THIS FILE IS GENERATED AUTOMATICALLY BY CONFIGURE # # #"; \
 sed -e "s#@prefix@#${prefix}#;
	 s#@version@#${version}#;
	 s#@libdir@#${libdir:-${ocaml_libpath}}#;
	 s#@stubdir@#${stubdir:-${ocaml_libpath}stublibs/}#;
	 s#@docdir@#${docdir:-${prefix}share/doc/}#;
	 s#@install_docs@#${install_docs:-1}#;
	 s#@cflags@#${cflags}#;
	 s#@ldflags@#${ldflags}#;
	 s#@ocamlflags@#${ocamlflags}#;
	 s#@EXAMPLESROOT@#${EXAMPLESROOT}#;
	 s#@OCAMLBIN@#${OCAMLBIN}#;
	 s#@OCAMLROOT@#${OCAMLROOT}#;" config.in) > config

