#! /bin/sh

sysname='Sundials/ML'
version=2.6.0
versionp=0
contact='tim@tbrk.org'

prefix=/usr/local/
unset libdir
unset stubdir
unset docdir
unset install_docs
enable_mpi=1
unset enable_debug
unset mathjax
opt_compiler=1
cflags_openmp=

configure_command="$0"

case `uname -s` in
    Darwin)
	# OS X does not search /usr/local by default.
	sundials_lib_path=/usr/local/lib
	Lsundials_lib_path=-L${sundials_lib_path}
	sundials_inc_path=/usr/local/include
	Isundials_inc_path=-I${sundials_inc_path}
	idirafter_sundials_inc_path="-idirafter ${sundials_inc_path}"
	;;
esac

for option in "$@"
do
    # Try to quote configure_command so that it can be cut-and-pasted to the
    # command line.  Not a perfect solution, but works for common cases.
    configure_command="${configure_command} '$option'"

    name=`expr "$option" : "\([^=]*\).*"`
    value=`expr "$option" : "[^=]*=\(.*\)"`

    case "$name" in
    --prefix)
	prefix="${value%/}/";;
    --libdir)
	libdir="${value%/}/";;
    --stubdir)
	stubdir="${value%/}/";;
    --docdir)
	docdir="${value%/}/";;
    --disable-doc)
	install_docs=0;;
    --disable-mpi)
	enable_mpi=0;;
    --disable-klu)
	enable_klu=0;;
    --disable-superlumt)
	enable_superlumt=0;;
    --enable-debug)
	enable_debug=1;;
    --unsafe)
	bounds_checking=0;;
    --no-opt-compiler) # not meant for users (under normal circumstances)
	opt_compiler=0;;
    -h|--help)
	cat <<-END_HELP_TEXT
	'configure' configures $sysname ${version}p${versionp} to adapt to many kinds of systems.

	Usage: $0 [OPTION]... [VAR=VALUE]...

	To assign environment variables (e.g., CC, CFLAGS...), specify them as
	VAR=VALUE.  See below for descriptions of some of the useful variables.

	Defaults for the options are specified in brackets.

	Configuration:
	  -h, --help              display this help and exit

	Installation directories:
	  --prefix=PREFIX         install architecture-independent files in PREFIX
	                          [$prefix]

	For better control, use the options below.

	Fine tuning of the installation directories:
	  --libdir=DIR           installation directory [OCAML]
	  --stubdir=DIR          stub installation directory [OCAML/stublibs]
	  --docdir=DIR           documentation [PREFIX/share/doc]

	Optional Features:
	  --disable-doc          do not install html documentation
	  --disable-mpi          build without parallel features
	  --disable-klu		 disable the KLU features
	  --disable-superlumt	 disable the SuperLU_MT features
	  --no-lib-path          do not record paths in the OCaml library
	  --enable-debug         enable assertions and debug symbols
	  --unsafe               no bounds or other runtime checks

	Optional settings:
	  OCAMLROOT		Path to OCaml installation
	  SUNDIALS_LIB_PATH	Path to Sundials libraries (for linking)
	  SUNDIALS_INC_PATH	Path to Sundials header files (for compiling)
	  SUPERLUMT_LIB_PATH	Path to SuperLU_MT libraries
	  LAPACKLIB		Command for linking with Lapack (default: -llapack)
	                        (sometimes also: -lSimTKlapack)
	  EXAMPLES		Path to installed examples (for comparison with Sundials).
	  OCAMLMPI		Path to OCamlMPI installation
	  MPICC			Name of the MPI compiler (default: mpicc)
	  MPIRUN		Name of MPI program launcher (default: mpirun)
	  MATHJAX		Local or remote directory containing MathJax.js
	                        (e.g., MATHJAX=/usr/share/javascript/mathjax)

	Set these options by passing arguments of the form FOO=value to help
	configure find libraries and programs with nonstandard names/locations.

	Report bugs to <$contact>.

END_HELP_TEXT
	exit 0
	;;
    OCAMLROOT)
	OCAMLROOT="${value%/}/"
	OCAMLBIN="${OCAMLROOT}bin/";;
    SUNDIALS_LIB_PATH)
	sundials_lib_path="${value%/}"
	Lsundials_lib_path="-L${sundials_lib_path}";;
    SUNDIALS_INC_PATH)
	sundials_inc_path="${value%/}"
	Isundials_inc_path="-I${sundials_inc_path}"
	idirafter_sundials_inc_path="-idirafter ${sundials_inc_path}";;
    SUPERLUMT_LIB_PATH)
	superlumt_lib_path="${value%/}"
	Lsuperlumt_lib_path="-L${superlumt_lib_path}";;
    CFLAGS_OPENMP)
        cflags_openmp="${value}";;
    LAPACKLIB)
	LAPACKLIB="${value}";;
    EXAMPLES)
	EXAMPLESROOT="${value}";;
    CPPFLAGS)
        cppflags="${value}";;
    CFLAGS)
	cflags="${value}";;
    LDFLAGS)
	ldflags="${value}";;
    OCAMLMPI)
	OCAMLMPI="${value}";;
    OCAMLFLAGS)
	ocamlflags="${value}";;
    OCAMLOPTFLAGS)
	ocamloptflags="${value}";;
    OCAMLMKLIBFLAGS)
	ocamlmklibflags="${value}";;
    MPICC)
	mpicc="${value}";;
    MPIRUN)
	mpirun="${value}";;
    MATHJAX)
	mathjax="${value}";;
    *)
	printf "illegal option \"%s\".\n" "$option" 1>&2; exit 2;;
    esac
done

CC=${CC:-cc}
CPP=${CPP:-cpp}
LAPACKLIB=${LAPACKLIB:-"-llapack"}
error=""

bounds_checking=${bounds_checking:-1}

if [ ${bounds_checking} -eq 0 ]; then
    ocamloptflags="-unsafe ${ocamloptflags}"
    ocamlflags="-unsafe ${ocamlflags}"
fi

# C compiler's output file names
if uname -s | grep -q MINGW; then
    XA=.lib
    XO=.obj
    XS=.dll
    XX=.exe
else
    XA=.a
    XO=.o
    XS=.so
    XX=
fi


# Check C compiler: detect gcc and add a default optimization level.
test_stem=__configure_test_file__
echo "#ifndef __GNUC__" > $test_stem.c
echo "#error not gcc" >> $test_stem.c
echo "#endif" >> $test_stem.c
using_gcc=false
$CC -c $test_stem.c >/dev/null 2>&1 && using_gcc=true
rm -f ./$test_stem.*
if [ $using_gcc = true ]; then
    c_suppress_warnings=-w
else
    c_suppress_warnings=
fi

if [ "x${cflags}" = x ]; then    # Don't touch CFLAGS if explicitly given.
    if [ $using_gcc = true ]; then
	optflags="-O2"

	# Compiling with -O2 and clang-602.0.49 (Apple LLVM version 6.1.0)
	# Results in a segfault in examples like
	#   cvode/serial/cvKrylovDemo_proc (in denseAddIdentity)
	# due to a miscompilation of sundials_ml.c:c_sundials_realarray2_wrap
	# (The code generated for the loop:
	#      table[0] = (realtype *)(ba->data);
	#      for (j = 1; j < nc; ++j) {
	#	  table[j] = table[j - 1] + nr;
	#      }
	#  is incorrect. To see, add this loop afterward:
	#      for (j = 0; j < nc; ++j)
	#         printf("table[%d] = %p\n", j, table[j]);
	#  TPB was unable to extract a minimum example.)
	if $CC -v 2>&1 | grep -q 'LLVM version 6.1'; then
	    optflags="-O1"
	fi

        if [ "x$enable_debug" = x1 ]; then
            cflags="-O0 -Wall -Werror -g3"
        else
            cflags="$optflags -Wall -Werror "
        fi
    else
        echo "<info> Your C compiler seems to be different from gcc.  Make"
        echo "<info> sure you set optimization flags explicitly with CFLAGS."
    fi
fi

if [ "x$enable_debug" = x1 ]; then
    if [ $using_gcc = true ]; then
        # This case is handled above.
        :
    else
        cflags="${cflags} -g"
    fi
    cppflags="${cppflags}"
else
    cflags="${cflags} -DNDEBUG=1"
    cppflags="${cppflags} -DNDEBUG=1"
fi

arch=`uname -m`
case ${arch} in
    x86_64)
	cflags="${cflags} -fPIC"
	;;
    *)
        :
	;;
esac

ml_cppflags="-P -traditional-cpp"
case `uname -s` in
    Darwin*)
	ml_cppflags="${ml_cppflags} -Wno-invalid-pp-token"
	;;
    *)
	ml_cppflags="${ml_cppflags} -x c"
	;;
esac

# Check for Sundials installation (and version)
include="\"sundials/sundials_config.h\""
query="SUNDIALS_PACKAGE_VERSION"
sundials_version=`printf "#include %s\n%s" "${include}" "${query}" \
		    | ${CPP} ${cppflags} ${Isundials_inc_path} -P 2>/dev/null \
		    | tail -1 | sed -e 's/ //g' -e 's/"//g'`
sls_ml_xo=
sls_cmo=
Lsundials_arkode=
arkode_mlobj_main=
arkode_cobj_main=
arkode_mlobj_bbd=
arkode_cobj_bbd=
arkode_subdir=
if [ "${sundials_version}" = "SUNDIALS_PACKAGE_VERSION" ]; then
    error="${error}\n\tcould not find sundials_config.h"
    sundials=0
    sundials_version="UNKNOWN"
else
    case "${sundials_version}" in
	[0-1].*.* | 2.[0-4].*)
	    error="${error}\n\tsundials >= 2.5.0 required" ;;
	2.5.*) sundials=250;;
	*)  sundials=260
	    sls_ml_xo=lsolvers/sls_ml${XO}
	    sls_cmo=lsolvers/sls.cmo
	    Lsundials_arkode=-lsundials_arkode
	    arkode_mlobj_main='arkode/arkode_impl.cmo arkode/arkode.cmo'
	    arkode_cobj_main=arkode/arkode_ml${XO}
	    arkode_mlobj_bbd=arkode/arkode_bbd.cmo
	    arkode_cobj_bbd=arkode/arkode_bbd_ml${XO}
	    arkode_subdir=arkode
	    ;;
    esac
    case "${sundials_version}" in
	2.6.0) sundials=260 ;;
	2.6.1) sundials=261 ;;
	2.6.2) sundials=262 ;;
	*) ;;
    esac

    # Make sure realtype has the right size.
    test_stem=__configure_test_file__realtype
    cat > $test_stem.c <<EOF
#include <sundials/sundials_types.h>
int main (int argc, char *argv[])
{
  return sizeof (realtype) != sizeof (double);
}
EOF
    compile_cmd="$CC ${Isundials_inc_path} -o ${test_stem}${XX} $test_stem.c"
    if ! eval "${compile_cmd}" >/dev/null 2>&1
    then
        error="${error}\n\tCan't link C code to sundials.  Is sundials installed properly?"
        error="${error}\n\tSaved test code as ${test_stem}.c"
        error="${error}\n\tCompilation command was:"
        error="${error}\n\t${compile_cmd}"
    elif ! ./$test_stem$XX
    then
        error="${error}\n\trealtype not defined as double.  Recompile sundials with -DSUNDIALS_PRECISION=double."
    else
        rm -f ./$test_stem*
    fi
fi

# Check for OCaml installation (and version)
ocaml_path=`${OCAMLBIN}ocamlc -where`
ocaml_version=`${OCAMLBIN}ocamlc -version`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find ocamlc"
    ocaml_path='NOT FOUND'
    ocaml_version=''
    ocaml_libpath=''
    ocaml_3x=''
    ocaml_has_version_h=''
else
    case "${ocaml_version}" in
	[0-2].*.* | 3.0* | 3.[2-9].* | 3.10.* | 3.11.*)
	    error="${error}\n\tocaml >= 3.12.0 required" ;;
	*) ;;
    esac

    case "${ocaml_version}" in
	3.*) ocaml_3x=1 ;;
	*) ocaml_3x=0 ;;
    esac

    case "${ocaml_version}" in
	3.*) ocaml_has_version_h=0 ;;
	4.01.*) ocaml_has_version_h=0 ;;
	*) ocaml_has_version_h=1 ;;
    esac

    ocaml_libpath="${ocaml_path%/}/"
    ocaml_version=" (${ocaml_version})"
fi

# Check if .opt variants are available.
if [ "x$opt_compiler" = x1 ] && \
       ([ -x ${OCAMLBIN}ocamlc.opt ] \
        || which ${OCAMLBIN}ocamlc.opt > /dev/null 2>&1)
then
    ocamlc="${OCAMLBIN}ocamlc.opt"
else
    ocamlc="${OCAMLBIN}ocamlc"
fi

if [ "x$opt_compiler" = x1 ] && \
       ([ -x ${OCAMLBIN}ocamlopt.opt ] \
        || which ${OCAMLBIN}ocamlopt.opt > /dev/null 2>&1)
then
    ocamlopt="${OCAMLBIN}ocamlopt.opt"
else
    ocamlopt="${OCAMLBIN}ocamlopt"
fi

if [ "x$opt_compiler" = x1 ] && \
       ([ -x ${OCAMLBIN}ocamldoc.opt ] \
        || which ${OCAMLBIN}ocamldoc.opt > /dev/null 2>&1)
then
    ocamldoc="${OCAMLBIN}ocamldoc.opt"
    ocamldoc_plugin=".cmxs"
else
    ocamldoc="${OCAMLBIN}ocamldoc"
    ocamldoc_plugin=".cma"
fi

if [ "x$opt_compiler" = x1 ] && \
       ([ -x ${OCAMLBIN}ocamldep.opt ] \
        || which ${OCAMLBIN}ocamldep.opt > /dev/null 2>&1)
then
    ocamldep="${OCAMLBIN}ocamldep.opt"
else
    ocamldep="${OCAMLBIN}ocamldep"
fi


cppflags="${cppflags} ${idirafter_sundials_inc_path} -idirafter ${ocaml_path}"
cflags="${cflags} -I${ocaml_path}"

include="<caml/mlvalues.h>"
query="SIZEOF_INT,SIZEOF_LONG,SIZEOF_PTR"
ilp_size=`printf "#include %s\n%s" "${include}" "${query}" | ${CPP} ${cppflags} -P 2>/dev/null | tail -1`
int_size=`expr "$ilp_size" : "^\([^,]*\),*"`
long_size=`expr "$ilp_size" : "^[^,]*,\([^,]*\),*"`
ptr_size=`expr "$ilp_size" : "^[^,]*,[^,]*,\([^,]*\)"`

if echo ${int_size:-not_found} | grep -q '[^0-9]'; then
    printf "Failed to detect size of \`int'.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi
if echo ${long_size:-not_found} | grep -q '[^0-9]'; then
    printf "Failed to detect size of \`long'.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi
if echo ${ptr_size:-not found} | grep -q '[^0-9]'; then
    printf "Failed to detect size of pointers.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi

if [ "${long_size}" -ne "${ptr_size}" ]; then
    error="${error}\nsizeof (long) does not match sizeof (void*)."
    error="${error}\nStarting with SUNDIALS version 2.5.0, DenseGETRF() and"
    error="${error}\nsimilar functions require arrays of longs as input,"
    error="${error}\nso this binding needs to map C's long * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int entries,"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user.  As a downside, this requires C's long type"
    error="${error}\nto have the same size as OCaml values, i.e. the same size"
    error="${error}\nas pointers.  The only platform known to violate this"
    error="${error}\nrequirement is Microsoft Visual C on 64-bit Windows"
    error="${error}\n(Win64).  If you must use this binding on 64-bit Windows,"
    error="${error}\ntry compiling SUNDIALS and the binding with Cygwin.  If"
    error="${error}\nusing Cygwin is not an option, write to us and we may"
    error="${error}\nbe able to hack together a workaround for Win64, albeit"
    error="${error}\nwith a slight performance hit."
fi
if [ "${int_size}" -ne 4 ]; then
    error="${error}\nint is not 32 bits on this platform."
    error="${error}\nSome SUNDIALS functions require arrays of ints as input,"
    error="${error}\nso this binding needs to map C's int * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int32 entries"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user, provided that C's int type is 32 bits.  This"
    error="${error}\nis the case with most, if not all, 32-bit and 64-bit"
    error="${error}\nsystems, and we were not aware of any platforms that are "
    error="${error}\nstill in use which violate this requirement.  However, it"
    error="${error}\nlooks like you have such a platform.  Please inform us"
    error="${error}\nabout your platform and we may be able to hack together a"
    error="${error}\nworkaround, albeit with a slight performance hit."
fi

# Check for opam
if command -v opam >/dev/null 2>&1; then
    opam_libpath="$(opam config var lib)/"

    # if the opam path is a prefix of the ocaml path, use the former
    case "${ocaml_libpath}" in
	"${opam_libpath}"*)
	    ocaml_libpath="${opam_libpath}";;
    esac

    # install the docs with opam
    if [ "x${docdir}" = x ]; then
	docdir="$(dirname "${opam_libpath}")/doc/sundials/"
    fi
else
    opam_libpath=''
fi


# Check if we can compile a direct call to caml_weak_get from C.  Usually we
# can, but it doesn't seem to be supported officially.  Note that a .c + .ml
# pair is infinitely easier to compile portably than a standalone .c file.
test_stem=__configure_test_file__
test_ml_stem=__configure_test_ml_file__
cat > $test_stem.c <<EOF
/* This file tests if we can call caml_weak_get() directly from C.  */
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/alloc.h>

CAMLprim value caml_weak_get (value ar, value n);
CAMLprim value caml_weak_set (value ar, value n, value el);
CAMLprim value caml_weak_create (value len);
#define None_val (Val_int(0))
#define Some_tag 0

CAMLprim value f ()
{
  CAMLparam0 ();
  CAMLlocal3 (table, x, y);

  table = caml_weak_create (Val_int (1));
  x = caml_weak_get (table, Val_int (0));
  if (x != None_val)
    CAMLreturn (Val_int (1));

  y = caml_alloc_small (1, Some_tag);
  Field (y, 0) = Val_int (42);
  caml_weak_set (table, Val_int (0), y);
  x = caml_weak_get (table, Val_int (0));
  if (!Is_block (x) || Tag_val(x) != Some_tag || Field (x,0) != Field(y,0))
    CAMLreturn (Val_int (2));

  caml_weak_set (table, Val_int (0), None_val);
  x = caml_weak_get (table, Val_int (0));
  if (x != None_val)
    CAMLreturn (Val_int (3));

  CAMLreturn (Val_int (0));
}
EOF
cat > ${test_ml_stem}.ml <<EOF
external f : unit -> int = "f"
let _ = exit (f ())
EOF
if ${ocamlc} ${test_stem}.c ${test_ml_stem}.ml -o ${test_ml_stem}$XX \
    -custom > /dev/null 2>&1 && ./${test_ml_stem}$XX; then
    have_weak=1
else
    have_weak=0
fi
rm -f ./${test_stem}.* ./${test_ml_stem}.* ${test_ml_stem}

# Check whether using generic math library (-lm) or not
libm=-lm
if [ $sundials -ge 260 ]; then
    include="\"sundials/sundials_config.h\""
    query="#ifdef SUNDIALS_USE_GENERIC_MATH\n1\n#else\n0\n#endif\n"
    sundials_info=`printf "#include %s\n%b" "${include}" "${query}" \
			| ${CPP} ${cppflags} ${Isundials_inc_path} -P 2>/dev/null \
			| grep -v ^$`
    case "${sundials_info}" in
	1) ;;
	0) unset libm ;;
	*) error="${error}\n\terror interpreting sundials_config.h" ;;
    esac
fi

# Check for shared library support in Sundials/C
enable_shared=1

test_stem=__configure_test_file__
test_c_stem=__configure_test_c_file__
echo 'void CVode(); void dummy () { CVode (); }' > $test_c_stem.c
echo 'external dummy : unit -> unit = "dummy" let _ = dummy ()' > $test_stem.ml
if ! $CC ${cflags} ${Isundials_inc_path} -o $test_c_stem$XO -c $test_c_stem.c \
    >$test_stem.log 2>&1 || ! ${ocamlc} -c $test_stem.ml \
    >> $test_stem.log 2>&1
then
    echo 1>&2 "Panic!  Dummy library failed to compile.  Please report"
    echo 1>&2 "this with ${test_stem}.log attached."
    exit 1
fi

if ! ${OCAMLBIN}ocamlmklib $test_c_stem$XO $test_stem.cmo \
    -o $test_stem -oc $test_stem \
    ${Lsundials_lib_path} -lsundials_cvode -lsundials_nvecserial ${libm} \
    > $test_stem.log 2>&1
then
    warning="${warning}\n\tSundials/C seems to be compiled without shared. library support"
    warning="${warning}\n\tSundials/ML may not work in the toplevel."
    enable_shared=
fi

rm -f ./lib${test_stem}.* ./dll${test_stem}.* \
    ./${test_stem}.* ./${test_c_stem}.*

# Check for LAPACK support
unset lapack_lib
if [ $sundials -gt 0 ]; then
    include="\"sundials/sundials_config.h\""
    if [ $sundials -ge 260 ]; then
	query="#ifdef SUNDIALS_BLAS_LAPACK\n1\n#else\n0\n#endif\n"
    else
	query="SUNDIALS_BLAS_LAPACK"
    fi
    sundials_info=`printf "#include %s\n%b" "${include}" "${query}" \
			| ${CPP} ${cppflags} ${Isundials_inc_path} -P 2>/dev/null \
			| grep -v ^$`
    case "${sundials_info}" in
	1) lapack_lib=${LAPACKLIB} ;;
	0) unset lapack_lib ;;
	*) error="${error}\n\terror interpreting sundials_config.h" ;;
    esac
fi

if [ "${lapack_lib}" = "" ]; then
    lapack_info=" (without lapack)"
    lapack_enabled=
else
    lapack_info=" (with lapack: ${lapack_lib})"
    lapack_enabled=1
fi

# Check for SUPERLUMT and KLU
sparse_libs=

klu_enabled=
klu_info="not available"
klu_cobj_sens=
klu_cobj_no_sens=
klu_mlobj_main=
klu_mlobj_sens=

superlumt_enabled=
superlumt_info="not available"
superlumt_cobj_sens=
superlumt_cobj_no_sens=
superlumt_mlobj_main=
superlumt_mlobj_sens=

if [ $sundials -ge 260 ]; then
    include="\"sundials/sundials_config.h\""
    q1="#ifdef SUNDIALS_KLU\n:KLU:\n#endif\n"
    q2="#ifdef SUNDIALS_SUPERLUMT\n:SUPERLUMT:\n#endif\n"
    sundials_info=`printf "#include %s\n%b%b" "${include}" "${q1}" "${q2}" \
		    | ${CPP} ${cppflags} ${Isundials_inc_path} -P 2>/dev/null \
		    | grep -v ^$`

    case "${sundials_info}" in
	*:KLU:*)
	    if [ ${enable_klu:-1} -eq 1 ]; then
		klu_enabled=1
		klu_info="installed"

		klu_cobj_sens="$klu_cobj_sens cvodes/cvode_klu_ml_s${XO}"
		klu_cobj_sens="$klu_cobj_sens cvodes/cvodes_klu_ml${XO}"
		klu_cobj_sens="$klu_cobj_sens idas/ida_klu_ml_s${XO}"
		klu_cobj_sens="$klu_cobj_sens idas/idas_klu_ml${XO}"

		klu_cobj_no_sens="$klu_cobj_no_sens cvode/cvode_klu_ml${XO}"
		klu_cobj_no_sens="$klu_cobj_no_sens ida/ida_klu_ml${XO}"
		klu_cobj_no_sens="$klu_cobj_no_sens kinsol/kinsol_klu_ml${XO}"
		klu_cobj_no_sens="$klu_cobj_no_sens arkode/arkode_klu_ml${XO}"

		klu_mlobj_main="$klu_mlobj_main cvode/cvode_klu.cmo"
		klu_mlobj_main="$klu_mlobj_main ida/ida_klu.cmo"
		klu_mlobj_main="$klu_mlobj_main kinsol/kinsol_klu.cmo"
		klu_mlobj_main="$klu_mlobj_main arkode/arkode_klu.cmo"

		klu_mlobj_sens="$klu_mlobj_sens cvodes/cvodes_klu.cmo"
		klu_mlobj_sens="$klu_mlobj_sens idas/idas_klu.cmo"

		sparse_libs="$sparse_libs -lklu -lamd -lcolamd -lbtf"
		sparse_libs="$sparse_libs -lsuitesparseconfig"
	    else
		klu_info='disabled'
	    fi;;
	*)  klu_info="not installed" ;;
    esac

    case "${sundials_info}" in
	*:SUPERLUMT:*)
	    if [ ${enable_superlumt:-1} -eq 1 ]; then
		superlumt_enabled=1
	        superlumt_info="installed"

superlumt_cobj_sens="$superlumt_cobj_sens cvodes/cvode_superlumt_ml_s${XO}"
superlumt_cobj_sens="$superlumt_cobj_sens cvodes/cvodes_superlumt_ml${XO}"
superlumt_cobj_sens="$superlumt_cobj_sens idas/ida_superlumt_ml_s${XO}"
superlumt_cobj_sens="$superlumt_cobj_sens idas/idas_superlumt_ml${XO}"

superlumt_cobj_no_sens="$superlumt_cobj_no_sens cvode/cvode_superlumt_ml${XO}"
superlumt_cobj_no_sens="$superlumt_cobj_no_sens ida/ida_superlumt_ml${XO}"
superlumt_cobj_no_sens="$superlumt_cobj_no_sens kinsol/kinsol_superlumt_ml${XO}"
superlumt_cobj_no_sens="$superlumt_cobj_no_sens arkode/arkode_superlumt_ml${XO}"

superlumt_mlobj_main="$superlumt_mlobj_main cvode/cvode_superlumt.cmo"
superlumt_mlobj_main="$superlumt_mlobj_main ida/ida_superlumt.cmo"
superlumt_mlobj_main="$superlumt_mlobj_main kinsol/kinsol_superlumt.cmo"
superlumt_mlobj_main="$superlumt_mlobj_main arkode/arkode_superlumt.cmo"

superlumt_mlobj_sens="$superlumt_mlobj_sens cvodes/cvodes_superlumt.cmo"
superlumt_mlobj_sens="$superlumt_mlobj_sens idas/idas_superlumt.cmo"

# TODO: detect which to install (how to do this?)
sparse_libs="$sparse_libs -lsuperlu_mt_PTHREAD -lblas -lpthread"
#sparse_libs="$sparse_libs -lsuperlu_mt_OPENMP -lblas -lopenmp"
		test_stem=__configure_test_c_file__superlumt
		cat > $test_stem.c <<EOF
int main ()
{
  void dCreate_Dense_Matrix ();
  dCreate_Dense_Matrix ();
  return 0;
}
EOF
		compile_cmd="$CC $test_stem.c ${sparse_libs} ${Lsuperlumt_lib_path} -o ${test_stem}${XX}"
		if ! eval "${compile_cmd}" >/dev/null 2>&1
                then
                    error="${error}\n\tCan't link to SuperLU_MT.  You may have to specify SUPERLUMT_LIB_PATH."
                    error="${error}\n\tSaved test code as ${test_stem}.c"
                    error="${error}\n\tCompilation command was: ${compile_cmd}"
                else
                    rm -f ${test_stem} ${test_stem}.*
                fi
	    else
		superlumt_info='disabled'
	    fi;;
	*)  superlumt_info="not installed" ;;
    esac
fi

# Combine all ldflags

ldflags="${ldflags} ${sparse_libs} ${lapack_lib}"

# Parallel features
mpicc=${mpicc:-mpicc}
mpirun=${mpirun:-mpirun}
if [ ${enable_mpi:-1} -eq 1 ]; then
    ocamlmpi_enabled=1

    # Check for OCamlMPI installation
    ocamlmpi="${OCAMLMPI:-${ocaml_libpath}mpi}"
    if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
	ocamlmpi="${ocaml_libpath}site-lib/mpi"
	if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
	    ocamlmpi="${opam_libpath}mpi"
	    if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
		ocamlmpi='NOT FOUND'
		ocamlmpi_enabled=
	    fi
	fi
    fi

    # Check for nvector_parallel installation
    test_stem=__configure_test_file__
    cat > $test_stem.c <<EOF
#include <nvector/nvector_parallel.h>
int main (int argc, char *argv[])
{
  MPI_Comm dummy;
  (void)N_VNewEmpty_Parallel (dummy, 0, 0);
  return 0;
}
EOF
    if ! $mpicc -o $test_stem$XX ${Isundials_inc_path} $test_stem.c \
	 ${Lsundials_lib_path} -lsundials_cvode -lsundials_nvecparallel \
	 ${libm} >/dev/null 2>&1;
    then
        sundialsmpi_info='not installed'
        ocamlmpi_enabled=
    else
        sundialsmpi_info='installed'
    fi
    rm -f ./$test_stem.* ./$test_stem$XX
else
    ocamlmpi_enabled=
    ocamlmpi='DISABLED (no parallel features)'
fi

if [ "x${ocamlmpi_enabled}" = x ]; then
    ocamlmpi_path=''
else
    ocamlmpi_path="$ocamlmpi"
    ocamlmpi="${ocamlmpi} (compiler: $mpicc)"
fi

serial_nvec_libs=-lsundials_nvecserial

# Check for nvector_pthread installation
nvecpthreads_info='not available'
nvecpthreads_enabled=
nvecpthreads_ml_xo=
nvecpthreads_cmo=
if [ $sundials -ge 260 ]; then
    test_stem=__configure_test_file__
    cat > $test_stem.c <<EOF
#include <nvector/nvector_pthreads.h>
int main (int argc, char *argv[])
{
  (void)N_VNew_Pthreads (1000, 10);
  return 0;
}
EOF
    if ! $CC -o $test_stem$XX ${Isundials_inc_path} $test_stem.c \
	 ${Lsundials_lib_path} -lsundials_nvecpthreads -lpthread ${libm} \
       >/dev/null 2>&1;
    then
	nvecpthreads_info='not installed'
    else
	nvecpthreads_info='installed'
	nvecpthreads_enabled=1
	nvecpthreads_ml_xo=nvectors/nvector_pthreads_ml${XO}
	nvecpthreads_cmo=nvectors/nvector_pthreads.cmo
	serial_nvec_libs="$serial_nvec_libs -lsundials_nvecpthreads"
    fi
    rm -f ./$test_stem.* ./$test_stem$XX
fi


# Check for nvector_openmp installation
nvecopenmp_info='not available'
nvecopenmp_enabled=
nvecopenmp_ml_xo=
nvecopenmp_cmo=
if [ $sundials -ge 260 ]; then
    test_stem=__configure_test_file__
    cat > $test_stem.c <<EOF
#include <nvector/nvector_openmp.h>
int main (int argc, char *argv[])
{
  (void)N_VNew_OpenMP (1000, 10);
  return 0;
}
EOF
    if ! $CC -o $test_stem$XX ${Isundials_inc_path} $test_stem.c \
	 ${Lsundials_lib_path} -lsundials_nvecopenmp ${libm} \
       >/dev/null 2>&1;
    then
	nvecopenmp_info='not installed'
    else
	nvecopenmp_info='installed'
	nvecopenmp_enabled=1
	nvecopenmp_ml_xo=nvectors/nvector_openmp_ml${XO}
	nvecopenmp_cmo=nvectors/nvector_openmp.cmo
	serial_nvec_libs="$serial_nvec_libs -lsundials_nvecopenmp"

        # Determine the C compiler flag for enabling OpenMP.
        if [ "x$cflags_openmp" = x ]; then
            cat > $test_stem.c <<EOF
void omp_set_num_threads (int);
int main (int argc, char *argv[])
{
  omp_set_num_threads(argc);
  #pragma omp for
  for (int i = 0; i <= argc; ++i)
    printf ("Making extra sure omp_set_num_threads() isn't optimized away");
  return 0;
}
EOF
            # Credit: List of known flags borrowed from ax_openmp.m4
            for flag in -fopenmp -openmp -mp -xopenmp -omp -qsmp=omp
            do
                if $CC $CFLAGS $flag $test_stem.c -o $test_stem$XX \
                       >/dev/null 2>&1
                then
                    cflags_openmp=$flag
                    break
                fi
            done
            if [ "x$cflags_openmp" = x ]; then
                warning="${warning}\n\tCouldn't determine C compiler flag for OpenMP.  The library should compile"
                warning="${warning}\n\tfine with OpenMP enabled, but some examples may fail to compile."
                warning="${warning}\n\tIf in doubt, re-configure with CFLAGS_OPENMP set to the appropriate flag."
            fi
        fi
    fi
    rm -f ./$test_stem.* ./$test_stem$XX
fi

# Sundials examples directory
if [ "x$EXAMPLESROOT" = x ]; then
    # Try to infer it from the include path.
    include="\"sundials/sundials_config.h\""
    prefix_info=`printf "#include %s\n" "${include}" \
	| ${CPP} ${cppflags} ${Isundials_inc_path} -E 2>/dev/null \
	| sed -ne "s/^.*\"\(.*\)\/include\/sundials\/sundials_config.h\".*$/\1/p" \
	| head -n 1`

    if [ "x${prefix_info}" != x ]; then
	EXAMPLESROOT="${prefix_info}/examples"
    elif [ "x${sundials_lib_path}" = x ]; then
	EXAMPLESROOT=/usr/local/examples
    else
	# Try to infer it from LIB_PATH.
	EXAMPLESROOT=`echo ${sundials_lib_path} | sed -e 's/lib$/examples/'`
    fi
fi
# Check if it's valid.
if [ -d "$EXAMPLESROOT/cvode/serial" ]; then
    examples_info="$EXAMPLESROOT"
else
    examples_info="NOT FOUND"
    EXAMPLESROOT=
fi


# MathJax
# Check presence of MathJax.js if absolute path.
if echo "${mathjax}" | grep -q '[a-zA-Z][-+.a-zA-Z0-9]*://'; then
    mathjax_known_online=
    mathjax_known_local=
elif [ "x${mathjax}" = x ]; then
    mathjax_known_online=1
    mathjax_known_local=
    mathjax=https://cdn.mathjax.org/mathjax/latest/
elif ! [ -r "${mathjax}/MathJax.js" ]; then
    error="${error}\n\t${mathjax}/MathJax.js not found or not readable"
else
    mathjax_known_online=
    mathjax_known_local=
    if [ "x${mathjax}" = "x${mathjax}" ] && \
        echo "${mathjax}" | grep -q '^[^/]';
    then
        warning="${warning}\n\tYour MATHJAX_PATH looks like a relative path."
        warning="${warning}\n\tIt may not work after a make install."
        # keep original ${mathjax}
        mathjax_known_local=1
    else
        mathjax=`echo "${mathjax}" | sed -e 's@^/@file:///@'`
        if echo "${mathjax}" | grep -q '^file://'; then
            mathjax_known_local=1
        fi
    fi
fi


# Show a summary

LOG=config.log

printf "\nConfiguration (${version}p${versionp})\n-----------------------\n" \
                                                                       > ${LOG}

printf "  OCaml\t\t\t${ocaml_path}${ocaml_version}\n"	              >> ${LOG}
printf "  Sundials\t\t${sundials_version}${lapack_info}\n"            >> ${LOG}
printf "    -parallel\t\t${sundialsmpi_info}\n"	                      >> ${LOG}
printf "    -nvector: pthreads\t${nvecpthreads_info}\n"	              >> ${LOG}
printf "    -nvector: openmp\t${nvecopenmp_info}\n"                   >> ${LOG}
printf "    -SuperLU_MT\t\t${superlumt_info}\n"	                      >> ${LOG}
printf "    -KLU\t\t${klu_info}\n"                                    >> ${LOG}
printf "    -examples\t\t${examples_info}\n"                          >> ${LOG}
printf "  OCamlMPI\t\t${ocamlmpi}\n"                                  >> ${LOG}
printf "  MathJax (for docs)\t${mathjax}"                             >> ${LOG}
if [ "x${mathjax_known_online}" = x1 ]; then
    printf " (rendering needs network)\n"                             >> ${LOG}
elif [ "x${mathjax_known_local}" = x1 ]; then
    printf " (offline rendering)\n"                                   >> ${LOG}
else
    printf "\n"	                                                      >> ${LOG}
fi
printf "\n"                                                           >> ${LOG}
printf "  Architecture\t\t${arch}\n"                                  >> ${LOG}
[ "x$enable_debug" = x1 ] && printf "  Debugging\t\tENABLED\n"        >> ${LOG}
printf "\n"                                                           >> ${LOG}
printf "Installation paths\n"                                         >> ${LOG}
printf "  prefix:\t\t${prefix}\n"                                     >> ${LOG}
printf "  libdir:\t\t${libdir:-${ocaml_libpath}}\n"                   >> ${LOG}
printf "  stubdir:\t\t${stubdir:-${ocaml_libpath}stublibs/}\n"        >> ${LOG}
if [ ${install_docs:-1} -eq 1 ]; then
    printf "  docdir:\t\t${docdir:-${prefix}share/doc/sundials_ml/}\n" >> ${LOG}
fi
printf "\n"                                                           >> ${LOG}

if [ -n "${error}" ]; then
    printf "Some errors occurred during configuration:${error}\n\n"   >> ${LOG}
    cat ${LOG}
    exit 1
elif [ -n "${warning}" ]; then
    printf "Warnings:${warning}\n\n"                                  >> ${LOG}
fi

cat ${LOG}

(printf "# # # THIS FILE IS GENERATED AUTOMATICALLY BY CONFIGURE # # #\n"; \
 sed -e "s#@prefix@#${prefix}#;
	 s#@configure_command@#${configure_command}#;
	 s#@version@#${version}#;
	 s#@versionp@#${versionp}#;
	 s#@libdir@#${libdir:-${ocaml_libpath}}#;
	 s#@stubdir@#${stubdir:-${ocaml_libpath}stublibs/}#;
	 s#@docdir@#${docdir:-${prefix}share/doc/sundials_ml/}#;
	 s#@install_docs@#${install_docs:-1}#;
	 s#@cflags@#${cflags}#;
	 s#@cppflags@#${cppflags}#;
	 s#@cflags_openmp@#${cflags_openmp}#;
	 s#@ml_cppflags@#${ml_cppflags}#;
	 s#@ldflags@#${ldflags}#;
	 s#@sundials_lib_path@#${Lsundials_lib_path}#;
	 s#@sundials_inc_path@#${Isundials_inc_path}#;
	 s#@superlumt_lib_path@#${Lsuperlumt_lib_path}#;
	 s#@link_sundials_arkode@#${Lsundials_arkode}#;
	 s#@arkode_mlobj_main@#${arkode_mlobj_main}#;
	 s#@arkode_cobj_main@#${arkode_cobj_main}#;
	 s#@arkode_mlobj_bbd@#${arkode_mlobj_bbd}#;
	 s#@arkode_cobj_bbd@#${arkode_cobj_bbd}#;
	 s#@arkode_subdir@#${arkode_subdir}#;
	 s#@ocamlflags@#${ocamlflags}#;
	 s#@ocamloptflags@#${ocamloptflags}#;
	 s#@ocaml_3x@#${ocaml_3x}#;
	 s#@ocamlmklibflags@#${ocamlmklibflags}#;
	 s#@bounds_checking@#${bounds_checking}#;
	 s#@ocamlc@#${ocamlc}#;
	 s#@ocamlopt@#${ocamlopt}#;
	 s#@ocamldoc@#${ocamldoc}#;
	 s#@ocamldoc_plugin@#${ocamldoc_plugin}#;
	 s#@ocamldep@#${ocamldep}#;
	 s#@ocamlmpi_path@#${ocamlmpi_path}#;
	 s#@ocamlmpi_enabled@#${ocamlmpi_enabled}#;
	 s#@enable_shared@#${enable_shared}#;
	 s#@lapack_enabled@#${lapack_enabled}#;
	 s#@sls_ml_xo@#${sls_ml_xo}#;
	 s#@sls_cmo@#${sls_cmo}#;
	 s#@nvecpthreads_enabled@#${nvecpthreads_enabled}#;
	 s#@nvecpthreads_ml_xo@#${nvecpthreads_ml_xo}#;
	 s#@nvecpthreads_cmo@#${nvecpthreads_cmo}#;
	 s#@nvecopenmp_enabled@#${nvecopenmp_enabled}#;
	 s#@nvecopenmp_ml_xo@#${nvecopenmp_ml_xo}#;
	 s#@nvecopenmp_cmo@#${nvecopenmp_cmo}#;
	 s#@serial_nvec_libs@#${serial_nvec_libs}#;
	 s#@sparse_libs@#${sparse_libs}#;
	 s#@klu_cobj_sens@#${klu_cobj_sens}#;
	 s#@klu_cobj_no_sens@#${klu_cobj_no_sens}#;
	 s#@klu_mlobj_main@#${klu_mlobj_main}#;
	 s#@klu_mlobj_sens@#${klu_mlobj_sens}#;
	 s#@superlumt_cobj_sens@#${superlumt_cobj_sens}#;
	 s#@superlumt_cobj_no_sens@#${superlumt_cobj_no_sens}#;
	 s#@superlumt_mlobj_main@#${superlumt_mlobj_main}#;
	 s#@superlumt_mlobj_sens@#${superlumt_mlobj_sens}#;
	 s#@cc@#${CC}#;
	 s#@cpp@#${CPP}#;
	 s#@mpicc@#$mpicc#;
	 s#@mpirun@#$mpirun#;
	 s#@mathjax@#${mathjax%/}#;
	 s#@c_suppress_warnings@#${c_suppress_warnings}#;
	 s#@XA@#${XA}#;
	 s#@XO@#${XO}#;
	 s#@XS@#${XS}#;
	 s#@EXAMPLESROOT@#${EXAMPLESROOT}#;
	 s#@OCAMLBIN@#${OCAMLBIN}#;
	 s#@OCAMLROOT@#${OCAMLROOT}#;" config.in) > config

echo "/* Automatically generated file - don't edit!  See configure.  */"\
     > src/config.h
echo "#ifndef __SUNDIALS_CONFIG_H__" >> src/config.h
echo "#define __SUNDIALS_CONFIG_H__" >> src/config.h
if [ "x${ocaml_has_version_h}" = x1 ]; then
    echo "#include <caml/version.h>" >> src/config.h
elif [ "x${ocaml_3x}" = x1 ]; then
    echo "#define OCAML_VERSION 31201" >> src/config.h
else
    echo "#define OCAML_VERSION 40100" >> src/config.h
fi
echo "#define HAVE_WEAK ${have_weak}" >> src/config.h
echo "#define SUNDIALS_ML_SAFE ${bounds_checking}" >> src/config.h
if [ "x${lapack_enabled}" = x1 ]; then
echo "#define SUNDIALS_ML_LAPACK" >> src/config.h
fi
if [ "x${klu_enabled}" = x1 ]; then
echo "#define SUNDIALS_ML_KLU" >> src/config.h
fi
if [ "x${superlumt_enabled}" = x1 ]; then
echo "#define SUNDIALS_ML_SUPERLUMT" >> src/config.h
fi
if [ "x${nvecpthreads_enabled}" = x1 ]; then
echo "#define SUNDIALS_ML_PTHREADS" >> src/config.h
fi
if [ "x${nvecopenmp_enabled}" = x1 ]; then
echo "#define SUNDIALS_ML_OPENMP" >> src/config.h
fi
echo "#define SUNDIALS_LIB_VERSION ${sundials}" >> src/config.h
echo "#endif /* __SUNDIALS_CONFIG_H__ */" >> src/config.h

# Note: config.ml conflicts with a module in the standard library.
echo "(* Automatically generated file - don't edit!  See configure.  *)"\
    > src/sundials/sundials_config.ml
versiondigits=`echo ${version} | sed -e 's/\\./,/g'`
echo "let version = ${versiondigits},${versionp}"\ >> src/sundials/sundials_config.ml
sundials_versiondigits=`echo ${sundials_version} | sed -e 's/\\./,/g'`
echo "let sundials_version = ${sundials_versiondigits}"\ >> src/sundials/sundials_config.ml
if [ "x${lapack_enabled}" = x ]; then
    echo "let lapack_enabled = false" >> src/sundials/sundials_config.ml
else
    echo "let lapack_enabled = true"  >> src/sundials/sundials_config.ml
fi
if [ "x${klu_enabled}" = x ]; then
    echo "let klu_enabled = false" >> src/sundials/sundials_config.ml
else
    echo "let klu_enabled = true"  >> src/sundials/sundials_config.ml
fi
if [ "x${superlumt_enabled}" = x ]; then
    echo "let superlumt_enabled = false" >> src/sundials/sundials_config.ml
else
    echo "let superlumt_enabled = true"  >> src/sundials/sundials_config.ml
fi
if [ "x${nvecpthreads_enabled}" = x ]; then
    echo "let nvecpthreads_enabled = false" >> src/sundials/sundials_config.ml
else
    echo "let nvecpthreads_enabled = true"  >> src/sundials/sundials_config.ml
fi
if [ "x${nvecopenmp_enabled}" = x ]; then
    echo "let nvecopenmp_enabled = false" >> src/sundials/sundials_config.ml
else
    echo "let nvecopenmp_enabled = true"  >> src/sundials/sundials_config.ml
fi
if [ "x${bounds_checking}" = x ]; then
    echo "let safe = false" >> src/sundials/sundials_config.ml
else
    echo "let safe = true"  >> src/sundials/sundials_config.ml
fi

