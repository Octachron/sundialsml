#! /bin/sh

sysname='Sundials/ML'
version=2.5.0
versionp=0
contact='tim@tbrk.org'

prefix=/usr/local/
unset libdir
unset stubdir
unset docdir
unset install_docs
enable_mpi=1
unset enable_debug
unset mathjax

configure_command="$0"

for option in "$@"
do
    # Try to quote configure_command so that it can be cut-and-pasted to the
    # command line.  Not a perfect solution, but works for common cases.
    configure_command="${configure_command} '$option'"

    name=`expr "$option" : "\([^=]*\).*"`
    value=`expr "$option" : "[^=]*=\(.*\)"`

    case "$name" in
    --prefix)
	prefix="${value%/}/";;
    --libdir)
	libdir="${value%/}/";;
    --stubdir)
	stubdir="${value%/}/";;
    --docdir)
	docdir="${value%/}/";;
    --disable-doc)
	install_docs=0;;
    --disable-mpi)
	enable_mpi=0;;
    --no-lib-path)
	no_lib_path=1;;
    --enable-debug)
	enable_debug=1;;
    --unsafe)
	bounds_checking=0;;
    -h|--help)
	cat <<-END_HELP_TEXT
	'configure' configures $sysname ${version}p${versionp} to adapt to many kinds of systems.

	Usage: $0 [OPTION]... [VAR=VALUE]...

	To assign environment variables (e.g., CC, CFLAGS...), specify them as
	VAR=VALUE.  See below for descriptions of some of the useful variables.

	Defaults for the options are specified in brackets.

	Configuration:
	  -h, --help              display this help and exit

	Installation directories:
	  --prefix=PREFIX         install architecture-independent files in PREFIX
	                          [$prefix]

	For better control, use the options below.

	Fine tuning of the installation directories:
	  --libdir=DIR           installation directory [OCAML]
	  --stubdir=DIR          stub installation directory [OCAML/stublibs]
	  --docdir=DIR           documentation [PREFIX/share/doc]

	Optional Features:
	  --disable-doc          do not install html documentation
	  --disable-mpi          build without parallel features (default: enable if possible)
	  --no-lib-path          do not record paths in the OCaml library
	  --enable-debug         enable assertions and debug symbols
	  --unsafe               no bounds or other runtime checks

	Optional settings:
	  OCAMLROOT     Path to OCaml installation
	  LAPACKLIB     Command for linking with Lapack (default: -llapack)
	                (sometimes also: -lSimTKlapack)
	  EXAMPLES      Path to installed examples (for comparison with Sundials).
	  OCAMLMPI      Path to OCamlMPI installation
	  MPICC         Name of the MPI compiler (default: mpicc)
	  MPIRUN        Name of MPI program launcher (default: mpirun)
	  MATHJAX	Local or remote directory containing MathJax.js
	                (e.g., MATHJAX=/usr/share/javascript/mathjax)

	Set these options by passing arguments of the form FOO=value to help
	configure find libraries and programs with nonstandard names/locations.

	Report bugs to <$contact>.

END_HELP_TEXT
	exit 0
	;;
    OCAMLROOT)
	OCAMLROOT="${value%/}/"
	OCAMLBIN="${OCAMLROOT}bin/";;
    LAPACKLIB)
	LAPACKLIB="${value}";;
    EXAMPLES)
	EXAMPLESROOT="${value}";;
    CPPFLAGS)
        cppflags="${value}";;
    CFLAGS)
	cflags="${value}";;
    LDFLAGS)
	ldflags="${value}";;
    OCAMLMPI)
	OCAMLMPI="${value}";;
    OCAMLFLAGS)
	ocamlflags="${value}";;
    OCAMLOPTFLAGS)
	ocamloptflags="${value}";;
    OCAMLMKLIBFLAGS)
	ocamlmklibflags="${value}";;
    MPICC)
	mpicc="${value}";;
    MPIRUN)
	mpirun="${value}";;
    MATHJAX)
	mathjax="${value}";;
    *)
	printf "illegal option \"$option\".\n" 1>&2; exit 2;;
    esac
done

CC=${CC:-cc}
CPP=${CPP:-cpp}
LAPACKLIB=${LAPACKLIB:-"-llapack"}
error=""

bounds_checking=${bounds_checking:-1}

if [ ${bounds_checking} -eq 0 ]; then
    ocamloptflags="-unsafe ${ocamloptflags}"
    ocamlflags="-unsafe ${ocamlflags}"
fi

# C compiler's output file names
if uname -s | grep -q MINGW; then
    XA=.lib
    XO=.obj
    XS=.dll
    XX=.exe
else
    XA=.a
    XO=.o
    XS=.so
    XX=
fi


# Check C compiler: detect gcc and add a default optimization level.
test_stem=__configure_test_file__
echo "#ifndef __GNUC__" > $test_stem.c
echo "#error not gcc" >> $test_stem.c
echo "#endif" >> $test_stem.c
using_gcc=false
$CC -c $test_stem.c >/dev/null 2>&1 && using_gcc=true
rm -f ./$test_stem.*
if [ $using_gcc = true ]; then
    c_suppress_warnings=-w
else
    c_suppress_warnings=
fi

if [ "x${cflags}" = x ]; then    # Don't touch CFLAGS if explicitly given.
    if [ $using_gcc = true ]; then
        if [ "x$enable_debug" = x1 ]; then
            cflags="-O0 -Wall -g3"
        else
            cflags="-O2 -Wall"
        fi
    else
        echo "<info> Your C compiler seems to be different from gcc.  Make"
        echo "<info> sure you set optimization flags explicitly with CFLAGS."
    fi
fi

if [ "x$enable_debug" = x1 ]; then
    if [ $using_gcc = true ]; then
        # This case is handled above.
        :
    else
        cflags="${cflags} -g"
    fi
    cppflags="${cppflags}"
else
    cppflags="${cppflags} -DNDEBUG=1"
fi

arch=`uname -m`
case ${arch} in
    x86_64)
	cflags="${cflags} -fPIC"
	;;
    *)
        :
	;;
esac

# Check for Sundials installation (and version)
if [ ! `which sundials-config` ]; then
    echo "ERROR: Sundials is not installed (no sundials-config)." 1>&2
    exit 1
fi

# Extract compilation flags from sundials-config.

# CPP flags:
cvode_cppflags="`sundials-config -m cvode -t s -l c -s cppflags`"
cvodes_cppflags="`sundials-config -m cvodes -t s -l c -s cppflags`"
ida_cppflags="`sundials-config -m ida -t s -l c -s cppflags`"
idas_cppflags="`sundials-config -m idas -t s -l c -s cppflags`"
kinsol_cppflags="`sundials-config -m kinsol -t s -l c -s cppflags`"

# Libraries: sundials-config's options are too coarse-grained, so we
# need to parse and separate them out.  Specifically:
#
# (a) sundials_mpi.cma must be linked without commiting to either
# -lsundials_cvode or -lsundials_cvodes (and likewise for ida/idas).
#
# (b) --no-lib-path removes the -L specification, to prevent it from
# being recorded in the *.cm(x)a files.  This assumes the sundials
# libraries are installed in a standard path cc searches by default.
#
# We assume there's only one occurrence of -L and the path contains no
# spaces.

# Flags sans -L.  The sed script sets up sentinels, erases -L, then
# erases sentinels.

cvode_ldflags="`sundials-config -m cvode -t s -l c -s libs \
	       | sed -e 's/^/ /; s/$/ /; s/ -L[^ ]* / /; s/^ //; s/ $//'`"
cvodes_ldflags="`sundials-config -m cvodes -t s -l c -s libs \
	        | sed -e 's/^/ /; s/$/ /; s/ -L[^ ]* / /; s/^ //; s/ $//'`"
ida_ldflags="`sundials-config -m ida -t s -l c -s libs \
	     | sed -e 's/^/ /; s/$/ /; s/ -L[^ ]* / /; s/^ //; s/ $//'`"
idas_ldflags="`sundials-config -m idas -t s -l c -s libs \
	      | sed -e 's/^/ /; s/$/ /; s/ -L[^ ]* / /; s/^ //; s/ $//'`"
kinsol_ldflags="`sundials-config -m kinsol -t s -l c -s libs \
	        | sed -e 's/^/ /; s/$/ /; s/ -L[^ ]* / /; s/^ //; s/ $//'`"

# The -L flag.  sundials_lib_path will be recorded in binaries.
# LIB_PATH has other uses.
LIB_PATH="`sundials-config -m cvode -t s -l c -s libs \
	  | sed -e 's/^/ /; s/$/ /; s/^.* \(-L[^ ]*\) .*/\1/'`"
if [ ${no_lib_path:-0} -eq 1 ]; then
    sundials_lib_path=
else
    sundials_lib_path="$LIB_PATH"
fi

# Make sure realtype has the right size.
test_stem=__configure_test_file__
cat > $test_stem.c <<EOF
#include <sundials/sundials_types.h>
int main (int argc, char *argv[])
{
  return sizeof (realtype) != sizeof (double);
}
EOF
if $CC $cvode_cppflags -o $test_stem$XX $test_stem.c >/dev/null 2>&1 && \
    ./$test_stem$XX;
then
    : # OK
else
    error="${error}\n\trealtype not defined as double.  Recompile sundials with --with-precision=double."
fi
rm -f ./$test_stem.*


# Check for OCaml installation (and version)
ocaml_path=`${OCAMLBIN}ocamlc -where`
ocaml_version=`${OCAMLBIN}ocamlc -version`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find ocamlc"
    ocaml_path='NOT FOUND'
    ocaml_version=''
    ocaml_libpath=''
    ocaml_3x=''
else
    case "${ocaml_version}" in
	[0-2].*.* | 3.0* | 3.[2-9].* | 3.10.* | 3.11.*)
	    error="${error}\n\tocaml >= 3.12.0 required" ;;
	*) ;;
    esac

    case "${ocaml_version}" in
	3.*) ocaml_3x=1 ;;
	*) ocaml_3x=0 ;;
    esac

    ocaml_libpath="${ocaml_path%/}/"
    ocaml_version=" (${ocaml_version})"
fi


cppflags="${cppflags} -I ${ocaml_path}"

query="#include <caml/mlvalues.h>\nSIZEOF_INT,SIZEOF_LONG,SIZEOF_PTR"
ilp_size=`echo ${query} | ${CPP} ${cppflags} -P | tail -1`
int_size=`expr "$ilp_size" : "^\([^,]*\),*"`
long_size=`expr "$ilp_size" : "^[^,]*,\([^,]*\),*"`
ptr_size=`expr "$ilp_size" : "^[^,]*,[^,]*,\([^,]*\)"`
if echo $int_size | grep -q '[^0-9]'; then
    printf "Failed to detect size of \`int'.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi
if echo $long_size | grep -q '[^0-9]'; then
    printf "Failed to detect size of \`long'.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi
if echo $ptr_size | grep -q '[^0-9]'; then
    printf "Failed to detect size of pointers.  This might be a problem\n"
    printf "with detecting your system's C preprocessor.\n\n"
    exit 1
fi

# Check for opam
if command -v opam >/dev/null 2>&1; then
    opam_libpath="$(opam config var lib)/"
else
    opam_libpath=''
fi


# Check if we can compile a direct call to caml_weak_get from C.  Usually we
# can, but it doesn't seem to be supported officially.  Note that a .c + .ml
# pair is infinitely easier to compile portably than a standalone .c file.
test_stem=__configure_test_file__
test_ml_stem=__configure_test_ml_file__
cat > $test_stem.c <<EOF
/* This file tests if we can call caml_weak_get() directly from C.  */
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/alloc.h>

CAMLprim value caml_weak_get (value ar, value n);
CAMLprim value caml_weak_set (value ar, value n, value el);
CAMLprim value caml_weak_create (value len);
#define None_val (Val_int(0))
#define Some_tag 0

CAMLprim value f ()
{
  CAMLparam0 ();
  CAMLlocal3 (table, x, y);

  table = caml_weak_create (Val_int (1));
  x = caml_weak_get (table, Val_int (0));
  if (x != None_val)
    CAMLreturn (Val_int (1));

  y = caml_alloc_small (1, Some_tag);
  Field (y, 0) = Val_int (42);
  caml_weak_set (table, Val_int (0), y);
  x = caml_weak_get (table, Val_int (0));
  if (!Is_block (x) || Tag_val(x) != Some_tag || Field (x,0) != Field(y,0))
    CAMLreturn (Val_int (2));

  caml_weak_set (table, Val_int (0), None_val);
  x = caml_weak_get (table, Val_int (0));
  if (x != None_val)
    CAMLreturn (Val_int (3));

  CAMLreturn (Val_int (0));
}
EOF
cat > ${test_ml_stem}.ml <<EOF
external f : unit -> int = "f"
let _ = exit (f ())
EOF
if ${OCAMLBIN}ocamlc ${test_stem}.c ${test_ml_stem}.ml -o ${test_ml_stem}$XX \
    -custom > /dev/null 2>&1 && ./${test_ml_stem}$XX; then
    have_weak=1
else
    have_weak=0
fi
rm -f ./${test_stem}.* ./${test_ml_stem}.* ${test_ml_stem}

if [ "${long_size}" -ne "${ptr_size}" ]; then
    error="${error}\nsizeof (long) does not match sizeof (void*)."
    error="${error}\nStarting with SUNDIALS version 2.5.0, DenseGETRF() and"
    error="${error}\nsimilar functions require arrays of longs as input,"
    error="${error}\nso this binding needs to map C's long * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int entries,"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user.  As a downside, this requires C's long type"
    error="${error}\nto have the same size as OCaml values, i.e. the same size"
    error="${error}\nas pointers.  The only platform known to violate this"
    error="${error}\nrequirement is Microsoft Visual C on 64-bit Windows"
    error="${error}\n(Win64).  If you must use this binding on 64-bit Windows,"
    error="${error}\ntry compiling SUNDIALS and the binding with Cygwin.  If"
    error="${error}\nusing Cygwin is not an option, write to us and we may"
    error="${error}\nbe able to hack together a workaround for Win64, albeit"
    error="${error}\nwith a slight performance hit."
fi
if [ "${int_size}" -ne 4 ]; then
    error="${error}\nint is not 32 bits on this platform."
    error="${error}\nSome SUNDIALS functions require arrays of ints as input,"
    error="${error}\nso this binding needs to map C's int * type to some OCaml"
    error="${error}\ntype.  We chose to map it to bigarray with int32 entries"
    error="${error}\nwhich gives an overhead-free mapping and a convenient API"
    error="${error}\nfor the user, provided that C's int type is 32 bits.  This"
    error="${error}\nis the case with most, if not all, 32-bit and 64-bit"
    error="${error}\nsystems, and we were not aware of any platforms that are "
    error="${error}\nstill in use which violate this requirement.  However, it"
    error="${error}\nlooks like you have such a platform.  Please inform us"
    error="${error}\nabout your platform and we may be able to hack together a"
    error="${error}\nworkaround, albeit with a slight performance hit."
fi


# Check for shared library support in Sundials/C
enable_shared=1

test_stem=__configure_test_file__
test_c_stem=__configure_test_c_file__
echo 'void CVode(); void dummy () { CVode (); }' > $test_c_stem.c
echo 'external dummy : unit -> unit = "dummy" let _ = dummy ()' > $test_stem.ml
if ! $CC ${cflags} ${cvode_cppflags} -o $test_c_stem$XO -c $test_c_stem.c \
    >$test_stem.log 2>&1 || ! ${OCAMLBIN}ocamlc -c $test_stem.ml \
    >> $test_stem.log 2>&1
then
    echo 1>&2 "Panic!  Dummy library failed to compile.  Please report"
    echo 1>&2 "this with ${test_stem}.log attached."
    exit 1
fi

if ! ${OCAMLBIN}ocamlmklib $test_c_stem$XO $test_stem.cmo \
    -o $test_stem -oc $test_stem \
    ${sundials_lib_path} ${cvode_ldflags} > $test_stem.log 2>&1
then
    warning="${warning}\n\tSundials/C seems to be compiled without --enable-shared."
    warning="${warning}\n\tSundials/ML may not work in the toplevel."
    enable_shared=
fi

rm -f ./lib${test_stem}.* ./dll${test_stem}.* \
    ./${test_stem}.* ./${test_c_stem}.*


# Check for LAPACK support
unset lapack_lib
query="#include \"sundials/sundials_config.h\"\nSUNDIALS_PACKAGE_VERSION,SUNDIALS_BLAS_LAPACK"
sundials_info=`echo "${query}" | ${CPP} ${cppflags} ${cvode_cppflags} -P | tail -1`
if [ $? -ne 0 ]; then
    error="${error}\n\tcould not find sundials_config.h"
    sundials_version="UNKNOWN"
else
    sundials_version=`echo ${sundials_info} | sed -ne 's/"\(.*\)",./\1/p'`

    case "${sundials_version}" in
	[0-1].*.* | 2.[0-4].*)
	    error="${error}\n\tsundials >= 2.5.0 required" ;;
	*) ;;
    esac

    case "${sundials_info}" in
	*,1)
	    lapack_lib=${LAPACKLIB}
	    ;;
	*,0)
	    unset lapack_lib ;;
	*)
	    error"${error}\n\terror interpreting sundials_config.h" ;;
    esac
fi

if [ "${lapack_lib}" = "" ]; then
    lapack_info=" (without lapack)"
    lapack_enabled=
else
    lapack_info=" (with lapack: ${lapack_lib})"
    lapack_enabled=1
fi

ldflags="${ldflags} ${lapack_lib}"



# Parallel features
mpicc=${mpicc:-mpicc}
mpirun=${mpirun:-mpirun}
if [ ${enable_mpi:-1} -eq 1 ]; then
    ocamlmpi_enabled=1

    # Check for OCamlMPI installation
    ocamlmpi="${OCAMLMPI:-${ocaml_libpath}mpi}"
    if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
	ocamlmpi="${ocaml_libpath}site-lib/mpi"
	if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
	    ocamlmpi="${opam_libpath}mpi"
	    if [ ! -e "${ocamlmpi}/mpi.cmi" ]; then
		ocamlmpi='NOT FOUND (OCamlMPI missing)'
		ocamlmpi_enabled=
	    fi
	fi
    fi

    # Check for nvector_parallel installation
    test_stem=__configure_test_file__
    cat > $test_stem.c <<EOF
#include <nvector/nvector_parallel.h>
int main (int argc, char *argv[])
{
  MPI_Comm dummy;
  (void)N_VNewEmpty_Parallel (dummy, 0, 0);
  return 0;
}
EOF
    if ! $mpicc -o $test_stem$XX $cvode_cppflags $test_stem.c \
         `sundials-config -m cvode -t p -l c -s libs` \
       >/dev/null 2>&1;
    then
        sundialsmpi_info='NO PARALLEL NVECTORS'
        ocamlmpi_enabled=
    else
        sundialsmpi_info='available'
    fi
    rm -f ./$test_stem.* ./$test_stem$XX
else
    ocamlmpi_enabled=
    ocamlmpi='DISABLED (no parallel features)'
fi

if [ "x${ocamlmpi_enabled}" = x ]; then
    ocamlmpi_path=''
else
    ocamlmpi_path="$ocamlmpi"
    ocamlmpi="${ocamlmpi} (compiler: $mpicc)"
fi


# Sundials examples directory
if [ "x$EXAMPLESROOT" = x ]; then
    # If not set, try to infer it from LIB_PATH.
    EXAMPLESROOT=`echo $LIB_PATH | sed -e 's/^-L//' -e 's/lib$/examples/'`
    #echo "LIB_PATH=$LIB_PATH EXAMPLESROOT=$EXAMPLESROOT"
fi
# Check if it's valid.
if [ -d "$EXAMPLESROOT/cvode/serial" ]; then
    examples_info="$EXAMPLESROOT"
else
    examples_info="NOT FOUND"
    EXAMPLESROOT=
fi


# MathJax
# Check presence of MathJax.js if absolute path.
if echo "${mathjax}" | grep -q '[a-zA-Z][-+.a-zA-Z0-9]*://'; then
    mathjax_known_online=
    mathjax_known_local=
elif [ "x${mathjax}" = x ]; then
    mathjax_known_online=1
    mathjax_known_local=
    mathjax=https://cdn.mathjax.org/mathjax/latest/
elif ! [ -r "${mathjax}/MathJax.js" ]; then
    error="${error}\n\t${mathjax}/MathJax.js not found or not readable"
else
    mathjax_known_online=
    mathjax_known_local=
    if [ "x${mathjax}" = "x${mathjax}" ] && \
        echo "${mathjax}" | grep -q '^[^/]';
    then
        warning="${warning}\n\tYour MATHJAX_PATH looks like a relative path."
        warning="${warning}\n\tIt may not work after a make install."
        # keep original ${mathjax}
        mathjax_known_local=1
    else
        mathjax=`echo "${mathjax}" | sed -e 's@^/@file:///@'`
        if echo "${mathjax}" | grep -q '^file://'; then
            mathjax_known_local=1
        fi
    fi
fi


# Show a summary

printf "\nConfiguration\n-------------\n\n"

printf "  OCaml\t\t\t${ocaml_path}${ocaml_version}\n"
printf "  Sundials\t\t${sundials_version}${lapack_info}\n"
printf "    -parallel\t\t${sundialsmpi_info}\n"
printf "    -examples\t\t${examples_info}\n"
printf "  OCamlMPI\t\t${ocamlmpi}\n"
printf "  MathJax (for docs)\t${mathjax}"
if [ "x${mathjax_known_online}" = x1 ]; then
    printf " (rendering needs network)\n"
elif [ "x${mathjax_known_local}" = x1 ]; then
    printf " (offline rendering)\n"
else
    printf "\n"
fi
printf "\n"
printf "  Architecture\t\t${arch}\n"
[ "x$enable_debug" = x1 ] && printf "  Debugging\t\tENABLED\n"
printf "\n"
printf "Installation paths\n"
printf "  prefix:\t\t${prefix}\n"
printf "  libdir:\t\t${libdir:-${ocaml_libpath}}\n"
printf "  stubdir:\t\t${stubdir:-${ocaml_libpath}stublibs/}\n"
if [ ${install_docs:-1} -eq 1 ]; then
    printf "  docdir:\t\t${docdir:-${prefix}share/doc/}\n"
fi
if [ ${no_lib_path:-0} -eq 1 ]; then
    printf "\n"
    printf "Other options\n"
    printf "  --no-lib-path given.  Make sure you know what you're doing!\n"
fi
printf "\n"

if [ -n "${error}" ]; then
    printf "Some errors occurred during configuration:${error}\n\n"
    exit 1
elif [ -n "${warning}" ]; then
    printf "Warnings:${warning}\n\n"
fi

(printf "# # # THIS FILE IS GENERATED AUTOMATICALLY BY CONFIGURE # # #\n"; \
 sed -e "s#@prefix@#${prefix}#;
	 s#@configure_command@#${configure_command}#;
	 s#@version@#${version}#;
	 s#@versionp@#${versionp}#;
	 s#@libdir@#${libdir:-${ocaml_libpath}}#;
	 s#@stubdir@#${stubdir:-${ocaml_libpath}stublibs/}#;
	 s#@docdir@#${docdir:-${prefix}share/doc/}#;
	 s#@install_docs@#${install_docs:-1}#;
	 s#@cflags@#${cflags}#;
	 s#@cppflags@#${cppflags}#;
	 s#@ldflags@#${ldflags}#;
	 s#@cvode_cppflags@#${cvode_cppflags}#;
	 s#@cvodes_cppflags@#${cvodes_cppflags}#;
	 s#@ida_cppflags@#${ida_cppflags}#;
	 s#@idas_cppflags@#${idas_cppflags}#;
	 s#@cvode_ldflags@#${cvode_ldflags}#;
	 s#@cvodes_ldflags@#${cvodes_ldflags}#;
	 s#@ida_ldflags@#${ida_ldflags}#;
	 s#@idas_ldflags@#${idas_ldflags}#;
	 s#@kinsol_cppflags@#${kinsol_cppflags}#;
	 s#@kinsol_ldflags@#${kinsol_ldflags}#;
	 s#@sundials_lib_path@#${sundials_lib_path}#;
	 s#@ocamlflags@#${ocamlflags}#;
	 s#@ocamloptflags@#${ocamloptflags}#;
	 s#@ocaml_3x@#${ocaml_3x}#;
	 s#@ocamlmklibflags@#${ocamlmklibflags}#;
	 s#@bounds_checking@#${bounds_checking}#;
	 s#@ocamlmpi_path@#${ocamlmpi_path}#;
	 s#@ocamlmpi_enabled@#${ocamlmpi_enabled}#;
	 s#@enable_shared@#${enable_shared}#;
	 s#@lapack_enabled@#${lapack_enabled}#;
	 s#@cc@#${CC}#;
	 s#@cpp@#${CPP}#;
	 s#@mpicc@#$mpicc#;
	 s#@mpirun@#$mpirun#;
	 s#@mathjax@#${mathjax%/}#;
	 s#@c_suppress_warnings@#${c_suppress_warnings}#;
	 s#@XA@#${XA}#;
	 s#@XO@#${XO}#;
	 s#@XS@#${XS}#;
	 s#@EXAMPLESROOT@#${EXAMPLESROOT}#;
	 s#@OCAMLBIN@#${OCAMLBIN}#;
	 s#@OCAMLROOT@#${OCAMLROOT}#;" config.in) > config

echo "/* Automatically generated file - don't edit!  See configure.  */"\
     > config.h
echo "#ifndef __SUNDIALS_CONFIG_H__" >> config.h
echo "#define __SUNDIALS_CONFIG_H__" >> config.h
echo "#define HAVE_WEAK ${have_weak}" >> config.h
echo "#define SUNDIALS_ML_SAFE ${bounds_checking}" >> config.h
echo "#endif /* __SUNDIALS_CONFIG_H__ */" >> config.h

# Note: config.ml conflicts with a module in the standard library.
echo "(* Automatically generated file - don't edit!  See configure.  *)"\
    > sundials_config.ml
versiondigits=`echo ${version} | sed -e 's/\\./,/g'`
echo "let version = ${versiondigits},${versionp}"\ >> sundials_config.ml
if [ "x${lapack_enabled}" = x ]; then
    echo "let lapack_enabled = false" >> sundials_config.ml
else
    echo "let lapack_enabled = true" >> sundials_config.ml
fi
if [ "x${bounds_checking}" = x1 ]; then
    echo "let safe = true" >> sundials_config.ml
else
    echo "let safe = false" >> sundials_config.ml
fi

